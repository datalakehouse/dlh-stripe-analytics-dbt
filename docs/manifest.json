{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.4", "generated_at": "2022-06-10T11:26:45.798574Z", "invocation_id": "d749a898-8588-45dd-b961-f3cdae575aec", "env": {}, "project_id": "8ae9826e6cdc043022580f3a1c2a6820", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.dlh_stripe.V_STR_PAYMENT_INTENT_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH payment_intent AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'PAYMENT_INTENT')}}\n),\nrename AS \n(\nSELECT  \n  --DLHK\n  MD5(ID) AS K_PAYMENT_INTENT_DLHK\n  ,MD5(ON_BEHALF_OF) AS K_ON_BEHALF_OF_ACCOUNT_DLHK\n  ,MD5(CUSTOMER) AS K_CUSTOMER_DLHK\n  ,MD5(INVOICE) AS K_INVOICE_DLHK\n  ,MD5(PAYMENT_METHOD) AS K_PAYMENT_METHOD_DLHK  \n  --BUSINESS KEYS\n  ,ID AS K_PAYMENT_INTENT_BK\n  ,CUSTOMER AS K_CUSTOMER_BK\n  ,ON_BEHALF_OF AS K_ON_BEHALF_OF_ACCOUNT_BK\n  ,INVOICE AS K_INVOICE_BK\n  ,PAYMENT_METHOD AS K_PAYMENT_METHOD_BK  \n  --ATTRIBUTES\n  ,APPLICATION AS A_APPLICATION\n  ,CAPTURE_METHOD AS A_CAPTURE_METHOD\n  ,CHARGES_URL AS A_CHARGES_URL  \n  ,CLIENT_SECRET AS A_CLIENT_SECRET\n  ,CONFIRMATION_METHOD AS A_CONFIRMATION_METHOD\n  ,CREATED AS A_CREATED_AT\n  ,CURRENCY AS A_CURRENCY  \n  ,DESCRIPTION AS A_DESCRIPTION  \n  ,LAST_PAYMENT_ERROR_CODE AS A_LAST_PAYMENT_ERROR_CODE\n  ,LAST_PAYMENT_ERROR_TYPE AS A_LAST_PAYMENT_ERROR_TYPE\n  ,NEXT_ACTION AS A_NEXT_ACTION \n  ,PAYMENT_METHOD_TYPES AS A_PAYMENT_METHOD_TYPES\n  ,RECEIPT_EMAIL AS A_RECEIPT_EMAIL\n  ,REVIEW AS A_REVIEW\n  ,SETUP_FUTURE_USAGE AS A_SETUP_FUTURE_USAGE\n  ,SHIPPING_ADDRESS AS A_SHIPPING_ADDRESS\n  ,SHIPPING_CARRIER AS A_SHIPPING_CARRIER\n  ,SHIPPING_NAME AS A_SHIPPING_NAME\n  ,SHIPPING_PHONE AS A_SHIPPING_PHONE\n  ,SHIPPING_TRACKING_NUMBER AS A_SHIPPING_TRACKING_NUMBER\n  ,STATEMENT_DESCRIPTOR AS A_STATEMENT_DESCRIPTOR\n  ,STATEMENT_DESCRIPTOR_SUFFIX AS A_STATEMENT_DESCRIPTOR_SUFFIX\n  ,STATUS AS A_STATUS\n  ,CANCELED_AT AS A_CANCELED_AT\n  ,CANCELLATION_REASON AS A_CANCELLATION_REASON\n  ,TRANSFER_DATA AS A_TRANSFER_DATA\n  ,TRANSFER_GROUP AS A_TRANSFER_GROUP  \n  ,CHARGES_HAS_MORE AS B_CHARGES_HAS_MORE\n  ,LIVEMODE AS B_LIVEMODE\n  --METRICS\n  ,DIV0(AMOUNT,100) AS M_AMOUNT\n  ,DIV0(AMOUNT_CAPTURABLE,100) AS M_AMOUNT_CAPTURABLE\n  ,DIV0(AMOUNT_RECEIVED,100) AS M_AMOUNT_RECEIVED\n  ,DIV0(APPLICATION_FEE_AMOUNT,100) AS M_APPLICATION_FEE_AMOUNT\n  --METADATA\n  , '{{invocation_id}}' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  payment_intent P\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_stripe.DEMO_STRIPE.PAYMENT_INTENT"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "PAYMENT_INTENT", "V_STR_PAYMENT_INTENT_STG"], "unique_id": "model.dlh_stripe.V_STR_PAYMENT_INTENT_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/PAYMENT_INTENT/V_STR_PAYMENT_INTENT_STG.sql", "original_file_path": "models/staging/PAYMENT_INTENT/V_STR_PAYMENT_INTENT_STG.sql", "name": "V_STR_PAYMENT_INTENT_STG", "alias": "V_STR_PAYMENT_INTENT_STG", "checksum": {"name": "sha256", "checksum": "e4380413611a0c9930008f0d75c118fc185e2998912a9e8b8ac7450a7a699abe"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_STRIPE", "PAYMENT_INTENT"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/PAYMENT_INTENT/V_STR_PAYMENT_INTENT_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.110962, "compiled_sql": "\n\nWITH payment_intent AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"PAYMENT_INTENT\"\n),\nrename AS \n(\nSELECT  \n  --DLHK\n  MD5(ID) AS K_PAYMENT_INTENT_DLHK\n  ,MD5(ON_BEHALF_OF) AS K_ON_BEHALF_OF_ACCOUNT_DLHK\n  ,MD5(CUSTOMER) AS K_CUSTOMER_DLHK\n  ,MD5(INVOICE) AS K_INVOICE_DLHK\n  ,MD5(PAYMENT_METHOD) AS K_PAYMENT_METHOD_DLHK  \n  --BUSINESS KEYS\n  ,ID AS K_PAYMENT_INTENT_BK\n  ,CUSTOMER AS K_CUSTOMER_BK\n  ,ON_BEHALF_OF AS K_ON_BEHALF_OF_ACCOUNT_BK\n  ,INVOICE AS K_INVOICE_BK\n  ,PAYMENT_METHOD AS K_PAYMENT_METHOD_BK  \n  --ATTRIBUTES\n  ,APPLICATION AS A_APPLICATION\n  ,CAPTURE_METHOD AS A_CAPTURE_METHOD\n  ,CHARGES_URL AS A_CHARGES_URL  \n  ,CLIENT_SECRET AS A_CLIENT_SECRET\n  ,CONFIRMATION_METHOD AS A_CONFIRMATION_METHOD\n  ,CREATED AS A_CREATED_AT\n  ,CURRENCY AS A_CURRENCY  \n  ,DESCRIPTION AS A_DESCRIPTION  \n  ,LAST_PAYMENT_ERROR_CODE AS A_LAST_PAYMENT_ERROR_CODE\n  ,LAST_PAYMENT_ERROR_TYPE AS A_LAST_PAYMENT_ERROR_TYPE\n  ,NEXT_ACTION AS A_NEXT_ACTION \n  ,PAYMENT_METHOD_TYPES AS A_PAYMENT_METHOD_TYPES\n  ,RECEIPT_EMAIL AS A_RECEIPT_EMAIL\n  ,REVIEW AS A_REVIEW\n  ,SETUP_FUTURE_USAGE AS A_SETUP_FUTURE_USAGE\n  ,SHIPPING_ADDRESS AS A_SHIPPING_ADDRESS\n  ,SHIPPING_CARRIER AS A_SHIPPING_CARRIER\n  ,SHIPPING_NAME AS A_SHIPPING_NAME\n  ,SHIPPING_PHONE AS A_SHIPPING_PHONE\n  ,SHIPPING_TRACKING_NUMBER AS A_SHIPPING_TRACKING_NUMBER\n  ,STATEMENT_DESCRIPTOR AS A_STATEMENT_DESCRIPTOR\n  ,STATEMENT_DESCRIPTOR_SUFFIX AS A_STATEMENT_DESCRIPTOR_SUFFIX\n  ,STATUS AS A_STATUS\n  ,CANCELED_AT AS A_CANCELED_AT\n  ,CANCELLATION_REASON AS A_CANCELLATION_REASON\n  ,TRANSFER_DATA AS A_TRANSFER_DATA\n  ,TRANSFER_GROUP AS A_TRANSFER_GROUP  \n  ,CHARGES_HAS_MORE AS B_CHARGES_HAS_MORE\n  ,LIVEMODE AS B_LIVEMODE\n  --METRICS\n  ,DIV0(AMOUNT,100) AS M_AMOUNT\n  ,DIV0(AMOUNT_CAPTURABLE,100) AS M_AMOUNT_CAPTURABLE\n  ,DIV0(AMOUNT_RECEIVED,100) AS M_AMOUNT_RECEIVED\n  ,DIV0(APPLICATION_FEE_AMOUNT,100) AS M_APPLICATION_FEE_AMOUNT\n  --METADATA\n  , 'd749a898-8588-45dd-b961-f3cdae575aec' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  payment_intent P\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_PAYMENT_INTENT_STG"}, "model.dlh_stripe.V_STR_CHARGES_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH charges AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'CHARGE')}}\n),\nrename AS \n(\nSELECT  \n    --DLHK\n    MD5(C.ID) AS K_CHARGE_DLHK\n    ,MD5(C.CUSTOMER) AS K_CUSTOMER_DLHK\n    ,MD5(C.INVOICE) AS K_INVOICE_DLHK\n    ,MD5(C.BALANCE_TRANSACTION) AS K_BALANCE_TRANSACTION_DLHK\n    ,MD5(C.PAYMENT_INTENT) AS K_PAYMENT_INTENT_DLHK\n    ,MD5(C.PAYMENT_METHOD) AS K_PAYMENT_METHOD_DLHK\n    --BUSINESS KEYS\n    ,C.ID AS K_CHARGE_BK\n    ,C.CUSTOMER AS K_CUSTOMER_BK\n    ,C.INVOICE AS K_INVOICE_BK    \n    ,C.BALANCE_TRANSACTION AS K_BALANCE_TRANSACTION_BK\n    ,C.PAYMENT_INTENT AS K_PAYMENT_INTENT_BK\n    ,C.PAYMENT_METHOD AS K_PAYMENT_METHOD_BK\n    --DESCRIPTION\n    ,C.APPLICATION AS A_APPLICATION    \n    ,C.CALCUATED_STATEMENT_DESCRIPTOR AS A_CALCULATED_STATEMENT_DESCRIPTOR\n    ,C.CREATED::TIMESTAMP AS A_CREATED_AT\n    ,C.CREATED::TIMESTAMP::DATE AS A_CREATED_DATE_AT\n    ,C.CHARGE_ORDER AS A_CHARGE_ORDER       \n    ,C.DESCRIPTION AS A_DESCRIPTION\n    ,C.FAILURE_CODE AS A_FAILURE_CODE\n    ,C.FAILURE_MESSAGE AS A_FAILURE_MESSAGE\n    ,C.FRAUD_DETAILS_STRIPE_REPORT AS A_FRAUD_DETAILS_STRIPE_REPORT\n    ,C.FRAUD_DETAILS_USER_REPORT AS A_FRAUD_DETAILS_USER_REPORT  \n    ,C.ON_BEHALF_OF AS A_ON_BEHALF_OF\n    ,C.RECEIPT_EMAIL AS A_RECEIPT_EMAIL\n    ,C.RECEIPT_NUMBER AS A_RECEIPT_NUMBER\n    ,C.RECEIPT_URL AS A_RECEIPT_URL\n    ,C.REFUNDS_URL AS A_REFUNDS_URL\n    ,C.SOURCE_TRANSFER AS A_SOURCE_TRANSFER\n    ,C.STATEMENT_DESCRIPTOR AS A_STATEMENT_DESCRIPTOR\n    ,C.STATUS AS A_STATUS\n    ,C.TRANSFER_DATA_DESTINATION AS A_TRANSFER_DATA_DESTINATION\n    ,C.TRANSFER_GROUP AS A_TRANSFER_GROUP\n    --BOOLEAN\n    ,C.DISPUTED AS B_DISPUTED\n    ,C.LIVEMODE AS B_LIVEMODE\n    ,C.REFUNDED AS B_REFUNDED\n    ,C.CAPTURED AS B_CAPTURED\n    ,C.PAID AS B_PAID\n    ,C.REFUNDS_HAS_MORE AS B_REFUNDS_HAS_MORE    \n    --METRICS\n    ,C.CURRENCY AS A_CURRENCY\n    ,DIV0(C.AMOUNT,100) AS M_AMOUNT\n    ,DIV0(C.AMOUNT_CAPTURED,100) AS M_AMOUNT_CAPTURED\n    ,DIV0(C.AMOUNT_REFUNDED,100) AS M_AMOUNT_REFUNDED\n    ,C.APPLICATION_FEE AS M_APPLICATION_FEE\n    ,DIV0(C.APPLICATION_FEE_AMOUNT,100) AS M_APPLICATION_FEE_AMOUNT\n  --METADATA\n  , '{{invocation_id}}' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  charges C\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_stripe.DEMO_STRIPE.CHARGE"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "CHARGE", "V_STR_CHARGES_STG"], "unique_id": "model.dlh_stripe.V_STR_CHARGES_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/CHARGE/V_STR_CHARGES_STG.sql", "original_file_path": "models/staging/CHARGE/V_STR_CHARGES_STG.sql", "name": "V_STR_CHARGES_STG", "alias": "V_STR_CHARGES_STG", "checksum": {"name": "sha256", "checksum": "14c6e6cbb1aff7d32e4c6a91d86c2d877fc16f5f30dec813d4915d2a663273b9"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_STRIPE", "CHARGE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/CHARGE/V_STR_CHARGES_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.118465, "compiled_sql": "\n\nWITH charges AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"CHARGE\"\n),\nrename AS \n(\nSELECT  \n    --DLHK\n    MD5(C.ID) AS K_CHARGE_DLHK\n    ,MD5(C.CUSTOMER) AS K_CUSTOMER_DLHK\n    ,MD5(C.INVOICE) AS K_INVOICE_DLHK\n    ,MD5(C.BALANCE_TRANSACTION) AS K_BALANCE_TRANSACTION_DLHK\n    ,MD5(C.PAYMENT_INTENT) AS K_PAYMENT_INTENT_DLHK\n    ,MD5(C.PAYMENT_METHOD) AS K_PAYMENT_METHOD_DLHK\n    --BUSINESS KEYS\n    ,C.ID AS K_CHARGE_BK\n    ,C.CUSTOMER AS K_CUSTOMER_BK\n    ,C.INVOICE AS K_INVOICE_BK    \n    ,C.BALANCE_TRANSACTION AS K_BALANCE_TRANSACTION_BK\n    ,C.PAYMENT_INTENT AS K_PAYMENT_INTENT_BK\n    ,C.PAYMENT_METHOD AS K_PAYMENT_METHOD_BK\n    --DESCRIPTION\n    ,C.APPLICATION AS A_APPLICATION    \n    ,C.CALCUATED_STATEMENT_DESCRIPTOR AS A_CALCULATED_STATEMENT_DESCRIPTOR\n    ,C.CREATED::TIMESTAMP AS A_CREATED_AT\n    ,C.CREATED::TIMESTAMP::DATE AS A_CREATED_DATE_AT\n    ,C.CHARGE_ORDER AS A_CHARGE_ORDER       \n    ,C.DESCRIPTION AS A_DESCRIPTION\n    ,C.FAILURE_CODE AS A_FAILURE_CODE\n    ,C.FAILURE_MESSAGE AS A_FAILURE_MESSAGE\n    ,C.FRAUD_DETAILS_STRIPE_REPORT AS A_FRAUD_DETAILS_STRIPE_REPORT\n    ,C.FRAUD_DETAILS_USER_REPORT AS A_FRAUD_DETAILS_USER_REPORT  \n    ,C.ON_BEHALF_OF AS A_ON_BEHALF_OF\n    ,C.RECEIPT_EMAIL AS A_RECEIPT_EMAIL\n    ,C.RECEIPT_NUMBER AS A_RECEIPT_NUMBER\n    ,C.RECEIPT_URL AS A_RECEIPT_URL\n    ,C.REFUNDS_URL AS A_REFUNDS_URL\n    ,C.SOURCE_TRANSFER AS A_SOURCE_TRANSFER\n    ,C.STATEMENT_DESCRIPTOR AS A_STATEMENT_DESCRIPTOR\n    ,C.STATUS AS A_STATUS\n    ,C.TRANSFER_DATA_DESTINATION AS A_TRANSFER_DATA_DESTINATION\n    ,C.TRANSFER_GROUP AS A_TRANSFER_GROUP\n    --BOOLEAN\n    ,C.DISPUTED AS B_DISPUTED\n    ,C.LIVEMODE AS B_LIVEMODE\n    ,C.REFUNDED AS B_REFUNDED\n    ,C.CAPTURED AS B_CAPTURED\n    ,C.PAID AS B_PAID\n    ,C.REFUNDS_HAS_MORE AS B_REFUNDS_HAS_MORE    \n    --METRICS\n    ,C.CURRENCY AS A_CURRENCY\n    ,DIV0(C.AMOUNT,100) AS M_AMOUNT\n    ,DIV0(C.AMOUNT_CAPTURED,100) AS M_AMOUNT_CAPTURED\n    ,DIV0(C.AMOUNT_REFUNDED,100) AS M_AMOUNT_REFUNDED\n    ,C.APPLICATION_FEE AS M_APPLICATION_FEE\n    ,DIV0(C.APPLICATION_FEE_AMOUNT,100) AS M_APPLICATION_FEE_AMOUNT\n  --METADATA\n  , 'd749a898-8588-45dd-b961-f3cdae575aec' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  charges C\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_CHARGES_STG"}, "model.dlh_stripe.V_STR_CREDIT_NOTE_HEADER_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH credit_note AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'CREDIT_NOTE')}}\n),\nrename AS \n(\nSELECT  \n--DLHK\n  MD5(ID) AS K_CREDIT_NOTE_DLHK\n  ,MD5(CUSTOMER) AS K_CUSTOMER_DLHK\n  --BK\n  ,ID AS K_CREDIT_NOTE_BK\n  ,CUSTOMER AS K_CUSTOMER_BK\n  ,INVOICE AS K_INVOICE_BK\n  ,REFUND AS K_REFUND_BK\n  ,CUSTOMER_BALANCE_TRANSACTION AS K_CUSTOMER_BALANCE_TRANSACTION_BK\n  --ATTRIBUTES\n  ,CREATED AS A_CREATED_AT\n  ,CREDIT_NOTE_TYPE AS A_CREDIT_NOTE_TYPE\n  ,CURRENCY AS A_CURRENCY    \n  ,MEMO AS A_MEMO\n  ,NUMBER AS A_NUMBER\n  ,OUT_OF_BAND_AMOUNT AS A_OUT_OF_BAND_AMOUNT\n  ,PDF AS A_PDF\n  ,REASON AS A_REASON\n  ,STATUS AS A_STATUS\n  --BOOLEAN\n  ,LIVEMODE AS B_LIVEMODE\n  --METRICS\n  ,DIV0(AMOUNT,100) AS M_AMOUNT\n  ,DIV0(DISCOUNT_AMOUNT,100) AS M_DISCOUNT_AMOUNT\n  ,DIV0(SUBTOTAL,100) AS M_SUBTOTAL\n  ,DIV0(TOTAL,100) AS M_TOTAL\n  --METADATA\n  , '{{invocation_id}}' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  credit_note I\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_stripe.DEMO_STRIPE.CREDIT_NOTE"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "CREDIT_NOTE", "V_STR_CREDIT_NOTE_HEADER_STG"], "unique_id": "model.dlh_stripe.V_STR_CREDIT_NOTE_HEADER_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/CREDIT_NOTE/V_STR_CREDIT_NOTE_HEADER_STG.sql", "original_file_path": "models/staging/CREDIT_NOTE/V_STR_CREDIT_NOTE_HEADER_STG.sql", "name": "V_STR_CREDIT_NOTE_HEADER_STG", "alias": "V_STR_CREDIT_NOTE_HEADER_STG", "checksum": {"name": "sha256", "checksum": "cb574fa97818067e8f5db38ec2badc6ffb76a34ae3ed08ef8ac42cae5ada54d0"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_STRIPE", "CREDIT_NOTE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/CREDIT_NOTE/V_STR_CREDIT_NOTE_HEADER_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.120944, "compiled_sql": "\n\nWITH credit_note AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"CREDIT_NOTE\"\n),\nrename AS \n(\nSELECT  \n--DLHK\n  MD5(ID) AS K_CREDIT_NOTE_DLHK\n  ,MD5(CUSTOMER) AS K_CUSTOMER_DLHK\n  --BK\n  ,ID AS K_CREDIT_NOTE_BK\n  ,CUSTOMER AS K_CUSTOMER_BK\n  ,INVOICE AS K_INVOICE_BK\n  ,REFUND AS K_REFUND_BK\n  ,CUSTOMER_BALANCE_TRANSACTION AS K_CUSTOMER_BALANCE_TRANSACTION_BK\n  --ATTRIBUTES\n  ,CREATED AS A_CREATED_AT\n  ,CREDIT_NOTE_TYPE AS A_CREDIT_NOTE_TYPE\n  ,CURRENCY AS A_CURRENCY    \n  ,MEMO AS A_MEMO\n  ,NUMBER AS A_NUMBER\n  ,OUT_OF_BAND_AMOUNT AS A_OUT_OF_BAND_AMOUNT\n  ,PDF AS A_PDF\n  ,REASON AS A_REASON\n  ,STATUS AS A_STATUS\n  --BOOLEAN\n  ,LIVEMODE AS B_LIVEMODE\n  --METRICS\n  ,DIV0(AMOUNT,100) AS M_AMOUNT\n  ,DIV0(DISCOUNT_AMOUNT,100) AS M_DISCOUNT_AMOUNT\n  ,DIV0(SUBTOTAL,100) AS M_SUBTOTAL\n  ,DIV0(TOTAL,100) AS M_TOTAL\n  --METADATA\n  , 'd749a898-8588-45dd-b961-f3cdae575aec' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  credit_note I\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_CREDIT_NOTE_HEADER_STG"}, "model.dlh_stripe.V_STR_CREDIT_NOTES_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH credit_note AS (\n  SELECT * FROM  {{ref('V_STR_CREDIT_NOTE_HEADER_STG')}}\n),\ncredit_note_item AS (\n  SELECT * FROM  {{ref('V_STR_CREDIT_NOTE_LINE_ITEM_STG')}}\n),\nrename AS \n(\nSELECT  \n    --DLHK\n    CI.K_CREDIT_NOTE_ITEM_DLHK\n    ,C.K_CREDIT_NOTE_DLHK\n    ,C.K_CUSTOMER_DLHK\n    --BK\n    ,C.K_CREDIT_NOTE_BK\n    ,C.K_CUSTOMER_BK\n    ,C.K_INVOICE_BK\n    ,C.K_REFUND_BK\n    ,C.K_CUSTOMER_BALANCE_TRANSACTION_BK\n    ,K_K_CREDIT_NOTE_ITEM_BK\n    --ATTRIBUTES\n    ,C.A_CREATED_AT\n    ,C.A_CREATED_AT::DATE AS A_CREATED_DATE_AT\n    ,C.A_CREDIT_NOTE_TYPE\n    ,C.A_CURRENCY    \n    ,C.A_MEMO\n    ,C.A_NUMBER\n    ,C.A_OUT_OF_BAND_AMOUNT\n    ,C.A_PDF\n    ,C.A_REASON\n    ,C.A_STATUS\n    ,CI.A_DESCRIPTION  AS A_ITEM_DESCRIPTION  \n    ,CI.A_UNIT_AMOUNT_DECIMAL AS A_ITEM_UNIT_AMOUNT_DECIMAL\n    --BOOLEAN\n    ,C.B_LIVEMODE AS B_CREDIT_NOTE_LIVEMODE\n    ,B_LIVEMODE  AS B_ITEM_LIVEMODE  \n    --METRICS\n    ,CI.M_AMOUNT AS M_ITEM_AMOUNT\n    ,CI.M_DISCOUNT_AMOUNT AS M_ITEM_DISCOUNT_AMOUNT\n    ,CI.M_QUANTITY AS M_ITEM_QUANTITY\n    ,CI.M_UNIT_AMOUNT AS M_ITEM_UNIT_AMOUNT\n  --METADATA\n  , '{{invocation_id}}' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  credit_note C\n  LEFT JOIN credit_note_item CI ON C.K_CREDIT_NOTE_DLHK = CI.K_CREDIT_NOTE_DLHK\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_stripe.V_STR_CREDIT_NOTE_HEADER_STG", "model.dlh_stripe.V_STR_CREDIT_NOTE_LINE_ITEM_STG"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "CREDIT_NOTE", "V_STR_CREDIT_NOTES_STG"], "unique_id": "model.dlh_stripe.V_STR_CREDIT_NOTES_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/CREDIT_NOTE/V_STR_CREDIT_NOTES_STG.sql", "original_file_path": "models/staging/CREDIT_NOTE/V_STR_CREDIT_NOTES_STG.sql", "name": "V_STR_CREDIT_NOTES_STG", "alias": "V_STR_CREDIT_NOTES_STG", "checksum": {"name": "sha256", "checksum": "70dd5979f6d6f2a71b1613fa45ca6c0ba374a32862317b23779c712f150837ff"}, "tags": ["staging", "daily"], "refs": [["V_STR_CREDIT_NOTE_HEADER_STG"], ["V_STR_CREDIT_NOTE_LINE_ITEM_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/CREDIT_NOTE/V_STR_CREDIT_NOTES_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.123313, "compiled_sql": "\n\nWITH credit_note AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_CREDIT_NOTE_HEADER_STG\n),\ncredit_note_item AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_CREDIT_NOTE_LINE_ITEM_STG\n),\nrename AS \n(\nSELECT  \n    --DLHK\n    CI.K_CREDIT_NOTE_ITEM_DLHK\n    ,C.K_CREDIT_NOTE_DLHK\n    ,C.K_CUSTOMER_DLHK\n    --BK\n    ,C.K_CREDIT_NOTE_BK\n    ,C.K_CUSTOMER_BK\n    ,C.K_INVOICE_BK\n    ,C.K_REFUND_BK\n    ,C.K_CUSTOMER_BALANCE_TRANSACTION_BK\n    ,K_K_CREDIT_NOTE_ITEM_BK\n    --ATTRIBUTES\n    ,C.A_CREATED_AT\n    ,C.A_CREATED_AT::DATE AS A_CREATED_DATE_AT\n    ,C.A_CREDIT_NOTE_TYPE\n    ,C.A_CURRENCY    \n    ,C.A_MEMO\n    ,C.A_NUMBER\n    ,C.A_OUT_OF_BAND_AMOUNT\n    ,C.A_PDF\n    ,C.A_REASON\n    ,C.A_STATUS\n    ,CI.A_DESCRIPTION  AS A_ITEM_DESCRIPTION  \n    ,CI.A_UNIT_AMOUNT_DECIMAL AS A_ITEM_UNIT_AMOUNT_DECIMAL\n    --BOOLEAN\n    ,C.B_LIVEMODE AS B_CREDIT_NOTE_LIVEMODE\n    ,B_LIVEMODE  AS B_ITEM_LIVEMODE  \n    --METRICS\n    ,CI.M_AMOUNT AS M_ITEM_AMOUNT\n    ,CI.M_DISCOUNT_AMOUNT AS M_ITEM_DISCOUNT_AMOUNT\n    ,CI.M_QUANTITY AS M_ITEM_QUANTITY\n    ,CI.M_UNIT_AMOUNT AS M_ITEM_UNIT_AMOUNT\n  --METADATA\n  , 'd749a898-8588-45dd-b961-f3cdae575aec' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  credit_note C\n  LEFT JOIN credit_note_item CI ON C.K_CREDIT_NOTE_DLHK = CI.K_CREDIT_NOTE_DLHK\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_CREDIT_NOTES_STG"}, "model.dlh_stripe.V_STR_CREDIT_NOTE_LINE_ITEM_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH credut_note_line AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'CREDIT_NOTE_LINE_ITEM')}}\n),\nrename AS \n(\nSELECT  \n  --DLHK\n  MD5(ID) AS K_CREDIT_NOTE_ITEM_DLHK\n  --BK  \n  ,ID AS K_K_CREDIT_NOTE_ITEM_BK\n  ,INVOICE_LINE_ITEM AS K_INVOICE_LINE_ITEM_BK\n  ,DESCRIPTION AS A_DESCRIPTION  \n  ,DIV0(UNIT_AMOUNT_DECIMAL,100) AS A_UNIT_AMOUNT_DECIMAL\n  ,LIVEMODE AS B_LIVEMODE  \n  ,DIV0(AMOUNT,100) AS M_AMOUNT\n  ,DIV0(DISCOUNT_AMOUNT,100) AS M_DISCOUNT_AMOUNT\n  ,QUANTITY AS M_QUANTITY\n  ,DIV0(UNIT_AMOUNT,100) AS M_UNIT_AMOUNT\n  --METADATA\n  , '{{invocation_id}}' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  credut_note_line I\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_stripe.DEMO_STRIPE.CREDIT_NOTE_LINE_ITEM"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "CREDIT_NOTE", "V_STR_CREDIT_NOTE_LINE_ITEM_STG"], "unique_id": "model.dlh_stripe.V_STR_CREDIT_NOTE_LINE_ITEM_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/CREDIT_NOTE/V_STR_CREDIT_NOTE_LINE_ITEM_STG.sql", "original_file_path": "models/staging/CREDIT_NOTE/V_STR_CREDIT_NOTE_LINE_ITEM_STG.sql", "name": "V_STR_CREDIT_NOTE_LINE_ITEM_STG", "alias": "V_STR_CREDIT_NOTE_LINE_ITEM_STG", "checksum": {"name": "sha256", "checksum": "9bdeaa79626788b6eb804791cbdedbacc2a772b24f0df6bd5f81a222400f1393"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_STRIPE", "CREDIT_NOTE_LINE_ITEM"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/CREDIT_NOTE/V_STR_CREDIT_NOTE_LINE_ITEM_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.1256819, "compiled_sql": "\n\nWITH credut_note_line AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"CREDIT_NOTE_LINE_ITEM\"\n),\nrename AS \n(\nSELECT  \n  --DLHK\n  MD5(ID) AS K_CREDIT_NOTE_ITEM_DLHK\n  --BK  \n  ,ID AS K_K_CREDIT_NOTE_ITEM_BK\n  ,INVOICE_LINE_ITEM AS K_INVOICE_LINE_ITEM_BK\n  ,DESCRIPTION AS A_DESCRIPTION  \n  ,DIV0(UNIT_AMOUNT_DECIMAL,100) AS A_UNIT_AMOUNT_DECIMAL\n  ,LIVEMODE AS B_LIVEMODE  \n  ,DIV0(AMOUNT,100) AS M_AMOUNT\n  ,DIV0(DISCOUNT_AMOUNT,100) AS M_DISCOUNT_AMOUNT\n  ,QUANTITY AS M_QUANTITY\n  ,DIV0(UNIT_AMOUNT,100) AS M_UNIT_AMOUNT\n  --METADATA\n  , 'd749a898-8588-45dd-b961-f3cdae575aec' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  credut_note_line I\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_CREDIT_NOTE_LINE_ITEM_STG"}, "model.dlh_stripe.V_STR_INVOICES_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH invoice_line AS (\n  SELECT * FROM  {{ref('V_STR_INVOICE_LINE_ITEM_STG')}}\n),\ninvoice_header AS (\n  SELECT * FROM  {{ref('V_STR_INVOICE_HEADER_STG')}}\n),\nrename AS \n(\nSELECT  \n--DLHK\n  MD5(IL.K_INVOICE_LINE_ITEM_DLHK) AS K_INVOICE_LINE_ITEM_DLHK\n  ,MD5(IL.K_INVOICE_DLHK) AS K_INVOICE_DLHK\n  ,MD5(IL.K_PLAN_DLHK) AS K_PLAN_DLHK\n  ,MD5(IL.K_SUBSCRIPTION_DLHK) AS K_SUBSCRIPTION_DLHK\n  ,MD5(IL.K_SUBSCRIPTION_ITEM_DLHK) AS K_SUBSCRIPTION_ITEM_DLHK\n  ,I.K_CHARGE_DLHK\n  ,I.K_CUSTOMER_DLHK\n--BK\n  ,IL.K_INVOICE_LINE_ITEM_BK\n  ,IL.K_INVOICE_BK\n  ,IL.K_PLAN_BK\n  ,IL.K_SUBSCRIPTION_BK\n  ,IL.K_SUBSCRIPTION_ITEM_BK\n  ,I.K_CHARGE_BK\n  ,I.K_CUSTOMER_BK\n  --ATTRIBUTES\n  ,IL.A_CURRENCY\n  ,IL.A_DESCRIPTION\n  ,IL.A_INVOICE_LINE_ITEM_TYPE\n  ,IL.A_PERIOD_START AS A_PERIOD_START_AT\n  ,IL.A_PERIOD_END AS A_PERIOD_END_AT\n  ,IL.A_PERIOD_START::DATE AS A_PERIOD_START_DATE_AT\n  ,IL.A_PERIOD_END::DATE AS A_PERIOD_END_DATE_AT\n  ,I.A_CREATED AS  A_INVOICE_CREATED_AT\n  ,I.A_CREATED::DATE AS  A_INVOICE_CREATED_DATE_AT\n  ,I.A_ACCOUNT_COUNTRY AS  A_INVOICE_ACCOUNT_COUNTRY\n  ,I.A_ACCOUNT_NAME AS  A_INVOICE_ACCOUNT_NAME\n  ,I.A_BILLING_REASON AS  A_INVOICE_BILLING_REASON\n  ,I.A_CURRENCY AS  A_INVOICE_CURRENCY\n  ,I.A_CUSTOM_FIELDS AS  A_INVOICE_CUSTOM_FIELDS\n  ,I.A_DUE_DATE AS  A_INVOICE_DUE_AT\n  ,I.A_DUE_DATE::DATE AS  A_INVOICE_DUE_DATE\n  ,I.A_FOOTER AS  A_INVOICE_FOOTER\n  ,I.A_LAST_FINALIZATION_ERROR AS  A_INVOICE_LAST_FINALIZATION_ERROR\n  ,I.A_TRANSFER_DATA AS  A_INVOICE_TRANSFER_DATA\n  ,I.A_WEBHOOKS_DELIVERED_AT AS  A_INVOICE_WEBHOOKS_DELIVERED_AT\n  ,I.A_ACCOUNT_TAX_IDS AS  A_INVOICE_ACCOUNT_TAX_IDS\n  ,I.A_CUSTOMER_TAX_IDS AS  A_INVOICE_CUSTOMER_TAX_IDS\n  --BOOLEAN\n  ,IL.B_LIVEMODE\n  ,I.B_ATTEMPTED AS  B_INVOICE_ATTEMPTED\n  ,I.B_AUTO_ADVANCE AS  B_INVOICE_AUTO_ADVANCE\n  --METRICS\n\n  --,I.M_TOTAL_DISCOUNT_AMOUNTS AS  M_INVOICE_TOTAL_DISCOUNT_AMOUNTS\n  --,I.M_TOTAL_TAX_AMOUNTS AS  M_INVOICE_TOTAL_TAX_AMOUNTS\n  --,I.M_AMOUNT_DUE AS  M_INVOICE_AMOUNT_DUE\n  --,I.M_AMOUNT_REMAINING AS  M_INVOICE_AMOUNT_REMAINING\n  ,I.M_ATTEMPT_COUNT AS  M_INVOICE_ATTEMPT_COUNT\n  --,I.M_ENDING_BALANCE AS  M_INVOICE_ENDING_BALANCE\n  --,DIV0(I.M_SUBTOTAL,100) AS  M_INVOICE_SUBTOTAL\n  --,DIV0(I.M_AMOUNT_PAID,100) AS  M_INVOICE_AMOUNT_PAID\n  --,DIV0(I.M_TAX,100) AS  M_INVOICE_TAX\n  ,DIV0(IL.M_AMOUNT,100) as M_INVOICE_LINE_AMOUNT\n  ,IL.M_QUANTITY as M_INVOICE_LINE_QUANTITY\n  ,DIV0(DIV0((I.M_AMOUNT_PAID * IL.M_AMOUNT),I.M_SUBTOTAL),100)::decimal(15,4) as M_ALLOCATED_PAID_AMOUNT    \n  ,DIV0(DIV0((I.M_TAX * IL.M_AMOUNT),I.M_SUBTOTAL),100)::decimal(15,4) as M_ALLOCATED_TOTAL_TAX_AMOUNTS\n  ,DIV0(DIV0((I.M_AMOUNT_DUE * IL.M_AMOUNT),I.M_SUBTOTAL),100)::decimal(15,4) as M_ALLOCATED_AMOUNT_DUE\n  ,DIV0(DIV0((I.M_AMOUNT_REMAINING * IL.M_AMOUNT),I.M_SUBTOTAL),100)::decimal(15,4) as M_ALLOCATED_AMOUNT_REMAINING\n  --METADATA\n  , '{{invocation_id}}' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  invoice_header I\n  LEFT JOIN invoice_line IL ON I.K_INVOICE_BK = IL.K_INVOICE_BK\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_stripe.V_STR_INVOICE_LINE_ITEM_STG", "model.dlh_stripe.V_STR_INVOICE_HEADER_STG"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "INVOICES", "V_STR_INVOICES_STG"], "unique_id": "model.dlh_stripe.V_STR_INVOICES_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/INVOICES/V_STR_INVOICES_STG.sql", "original_file_path": "models/staging/INVOICES/V_STR_INVOICES_STG.sql", "name": "V_STR_INVOICES_STG", "alias": "V_STR_INVOICES_STG", "checksum": {"name": "sha256", "checksum": "d0a9e1a5de471e0e75a3025d2d78eef885a988ed1cf5d7036b98aa260cf498c6"}, "tags": ["staging", "daily"], "refs": [["V_STR_INVOICE_LINE_ITEM_STG"], ["V_STR_INVOICE_HEADER_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/INVOICES/V_STR_INVOICES_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.127991, "compiled_sql": "\n\nWITH invoice_line AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_INVOICE_LINE_ITEM_STG\n),\ninvoice_header AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_INVOICE_HEADER_STG\n),\nrename AS \n(\nSELECT  \n--DLHK\n  MD5(IL.K_INVOICE_LINE_ITEM_DLHK) AS K_INVOICE_LINE_ITEM_DLHK\n  ,MD5(IL.K_INVOICE_DLHK) AS K_INVOICE_DLHK\n  ,MD5(IL.K_PLAN_DLHK) AS K_PLAN_DLHK\n  ,MD5(IL.K_SUBSCRIPTION_DLHK) AS K_SUBSCRIPTION_DLHK\n  ,MD5(IL.K_SUBSCRIPTION_ITEM_DLHK) AS K_SUBSCRIPTION_ITEM_DLHK\n  ,I.K_CHARGE_DLHK\n  ,I.K_CUSTOMER_DLHK\n--BK\n  ,IL.K_INVOICE_LINE_ITEM_BK\n  ,IL.K_INVOICE_BK\n  ,IL.K_PLAN_BK\n  ,IL.K_SUBSCRIPTION_BK\n  ,IL.K_SUBSCRIPTION_ITEM_BK\n  ,I.K_CHARGE_BK\n  ,I.K_CUSTOMER_BK\n  --ATTRIBUTES\n  ,IL.A_CURRENCY\n  ,IL.A_DESCRIPTION\n  ,IL.A_INVOICE_LINE_ITEM_TYPE\n  ,IL.A_PERIOD_START AS A_PERIOD_START_AT\n  ,IL.A_PERIOD_END AS A_PERIOD_END_AT\n  ,IL.A_PERIOD_START::DATE AS A_PERIOD_START_DATE_AT\n  ,IL.A_PERIOD_END::DATE AS A_PERIOD_END_DATE_AT\n  ,I.A_CREATED AS  A_INVOICE_CREATED_AT\n  ,I.A_CREATED::DATE AS  A_INVOICE_CREATED_DATE_AT\n  ,I.A_ACCOUNT_COUNTRY AS  A_INVOICE_ACCOUNT_COUNTRY\n  ,I.A_ACCOUNT_NAME AS  A_INVOICE_ACCOUNT_NAME\n  ,I.A_BILLING_REASON AS  A_INVOICE_BILLING_REASON\n  ,I.A_CURRENCY AS  A_INVOICE_CURRENCY\n  ,I.A_CUSTOM_FIELDS AS  A_INVOICE_CUSTOM_FIELDS\n  ,I.A_DUE_DATE AS  A_INVOICE_DUE_AT\n  ,I.A_DUE_DATE::DATE AS  A_INVOICE_DUE_DATE\n  ,I.A_FOOTER AS  A_INVOICE_FOOTER\n  ,I.A_LAST_FINALIZATION_ERROR AS  A_INVOICE_LAST_FINALIZATION_ERROR\n  ,I.A_TRANSFER_DATA AS  A_INVOICE_TRANSFER_DATA\n  ,I.A_WEBHOOKS_DELIVERED_AT AS  A_INVOICE_WEBHOOKS_DELIVERED_AT\n  ,I.A_ACCOUNT_TAX_IDS AS  A_INVOICE_ACCOUNT_TAX_IDS\n  ,I.A_CUSTOMER_TAX_IDS AS  A_INVOICE_CUSTOMER_TAX_IDS\n  --BOOLEAN\n  ,IL.B_LIVEMODE\n  ,I.B_ATTEMPTED AS  B_INVOICE_ATTEMPTED\n  ,I.B_AUTO_ADVANCE AS  B_INVOICE_AUTO_ADVANCE\n  --METRICS\n\n  --,I.M_TOTAL_DISCOUNT_AMOUNTS AS  M_INVOICE_TOTAL_DISCOUNT_AMOUNTS\n  --,I.M_TOTAL_TAX_AMOUNTS AS  M_INVOICE_TOTAL_TAX_AMOUNTS\n  --,I.M_AMOUNT_DUE AS  M_INVOICE_AMOUNT_DUE\n  --,I.M_AMOUNT_REMAINING AS  M_INVOICE_AMOUNT_REMAINING\n  ,I.M_ATTEMPT_COUNT AS  M_INVOICE_ATTEMPT_COUNT\n  --,I.M_ENDING_BALANCE AS  M_INVOICE_ENDING_BALANCE\n  --,DIV0(I.M_SUBTOTAL,100) AS  M_INVOICE_SUBTOTAL\n  --,DIV0(I.M_AMOUNT_PAID,100) AS  M_INVOICE_AMOUNT_PAID\n  --,DIV0(I.M_TAX,100) AS  M_INVOICE_TAX\n  ,DIV0(IL.M_AMOUNT,100) as M_INVOICE_LINE_AMOUNT\n  ,IL.M_QUANTITY as M_INVOICE_LINE_QUANTITY\n  ,DIV0(DIV0((I.M_AMOUNT_PAID * IL.M_AMOUNT),I.M_SUBTOTAL),100)::decimal(15,4) as M_ALLOCATED_PAID_AMOUNT    \n  ,DIV0(DIV0((I.M_TAX * IL.M_AMOUNT),I.M_SUBTOTAL),100)::decimal(15,4) as M_ALLOCATED_TOTAL_TAX_AMOUNTS\n  ,DIV0(DIV0((I.M_AMOUNT_DUE * IL.M_AMOUNT),I.M_SUBTOTAL),100)::decimal(15,4) as M_ALLOCATED_AMOUNT_DUE\n  ,DIV0(DIV0((I.M_AMOUNT_REMAINING * IL.M_AMOUNT),I.M_SUBTOTAL),100)::decimal(15,4) as M_ALLOCATED_AMOUNT_REMAINING\n  --METADATA\n  , 'd749a898-8588-45dd-b961-f3cdae575aec' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  invoice_header I\n  LEFT JOIN invoice_line IL ON I.K_INVOICE_BK = IL.K_INVOICE_BK\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_INVOICES_STG"}, "model.dlh_stripe.V_STR_INVOICE_LINE_ITEM_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH invoice AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'INVOICE_LINE_ITEM')}}\n),\nrename AS \n(\nSELECT  \n--DLHK\n  MD5(ID) AS K_INVOICE_LINE_ITEM_DLHK\n  ,MD5(INVOICE_ID) AS K_INVOICE_DLHK\n  ,MD5(PLAN_ID) AS K_PLAN_DLHK\n  ,MD5(SUBSCRIPTION_ID) AS K_SUBSCRIPTION_DLHK\n  ,MD5(SUBSCRIPTION_ITEM_ID) AS K_SUBSCRIPTION_ITEM_DLHK\n--BK\n  ,ID AS K_INVOICE_LINE_ITEM_BK\n  ,INVOICE_ID AS K_INVOICE_BK\n  ,PLAN_ID AS K_PLAN_BK\n  ,SUBSCRIPTION_ID AS K_SUBSCRIPTION_BK\n  ,SUBSCRIPTION_ITEM_ID AS K_SUBSCRIPTION_ITEM_BK\n  --ATTRIBUTES\n  ,CURRENCY AS A_CURRENCY\n  ,DESCRIPTION AS A_DESCRIPTION\n  ,INVOICE_LINE_ITEM_TYPE AS A_INVOICE_LINE_ITEM_TYPE\n  ,PERIOD_END AS A_PERIOD_END\n  ,PERIOD_START AS A_PERIOD_START\n  --BOOLEAN\n  ,DISCOUNTABLE AS B_DISCOUNTABLE\n  ,LIVEMODE AS B_LIVEMODE\n  ,PRORATION AS B_PRORATION\n  --METRICS\n  ,AMOUNT AS M_AMOUNT\n  ,QUANTITY AS M_QUANTITY\n  --METADATA\n  , '{{invocation_id}}' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  invoice I\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_stripe.DEMO_STRIPE.INVOICE_LINE_ITEM"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "INVOICES", "V_STR_INVOICE_LINE_ITEM_STG"], "unique_id": "model.dlh_stripe.V_STR_INVOICE_LINE_ITEM_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/INVOICES/V_STR_INVOICE_LINE_ITEM_STG.sql", "original_file_path": "models/staging/INVOICES/V_STR_INVOICE_LINE_ITEM_STG.sql", "name": "V_STR_INVOICE_LINE_ITEM_STG", "alias": "V_STR_INVOICE_LINE_ITEM_STG", "checksum": {"name": "sha256", "checksum": "2d86971604b14c9036cfe7b5394af5b92392febaaba3042a5f32ec3fcaa9a4cd"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_STRIPE", "INVOICE_LINE_ITEM"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/INVOICES/V_STR_INVOICE_LINE_ITEM_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.130441, "compiled_sql": "\n\nWITH invoice AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"INVOICE_LINE_ITEM\"\n),\nrename AS \n(\nSELECT  \n--DLHK\n  MD5(ID) AS K_INVOICE_LINE_ITEM_DLHK\n  ,MD5(INVOICE_ID) AS K_INVOICE_DLHK\n  ,MD5(PLAN_ID) AS K_PLAN_DLHK\n  ,MD5(SUBSCRIPTION_ID) AS K_SUBSCRIPTION_DLHK\n  ,MD5(SUBSCRIPTION_ITEM_ID) AS K_SUBSCRIPTION_ITEM_DLHK\n--BK\n  ,ID AS K_INVOICE_LINE_ITEM_BK\n  ,INVOICE_ID AS K_INVOICE_BK\n  ,PLAN_ID AS K_PLAN_BK\n  ,SUBSCRIPTION_ID AS K_SUBSCRIPTION_BK\n  ,SUBSCRIPTION_ITEM_ID AS K_SUBSCRIPTION_ITEM_BK\n  --ATTRIBUTES\n  ,CURRENCY AS A_CURRENCY\n  ,DESCRIPTION AS A_DESCRIPTION\n  ,INVOICE_LINE_ITEM_TYPE AS A_INVOICE_LINE_ITEM_TYPE\n  ,PERIOD_END AS A_PERIOD_END\n  ,PERIOD_START AS A_PERIOD_START\n  --BOOLEAN\n  ,DISCOUNTABLE AS B_DISCOUNTABLE\n  ,LIVEMODE AS B_LIVEMODE\n  ,PRORATION AS B_PRORATION\n  --METRICS\n  ,AMOUNT AS M_AMOUNT\n  ,QUANTITY AS M_QUANTITY\n  --METADATA\n  , 'd749a898-8588-45dd-b961-f3cdae575aec' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  invoice I\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_INVOICE_LINE_ITEM_STG"}, "model.dlh_stripe.V_STR_INVOICE_HEADER_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH invoice AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'INVOICE')}}\n),\nrename AS \n(\nSELECT  \n  --DLHK\n  MD5(ID) AS K_INVOICE_DLHK\n  ,MD5(CHARGE) AS K_CHARGE_DLHK\n  ,MD5(CUSTOMER) AS K_CUSTOMER_DLHK\n  ,MD5(SUBSCRIPTION) AS K_SUBSCRIPTION_DLHK\n  --BK\n  ,ID AS K_INVOICE_BK\n  ,CHARGE AS K_CHARGE_BK\n  ,CUSTOMER AS K_CUSTOMER_BK\n  ,SUBSCRIPTION AS K_SUBSCRIPTION_BK\n  --ATTRIBUTES\n  ,CREATED AS A_CREATED\n  ,ACCOUNT_COUNTRY AS A_ACCOUNT_COUNTRY\n  ,ACCOUNT_NAME AS A_ACCOUNT_NAME\n  ,BILLING_REASON AS A_BILLING_REASON\n  ,CURRENCY AS A_CURRENCY  \n  ,CUSTOMER_ADDRESS AS A_CUSTOMER_ADDRESS\n  ,CUSTOMER_EMAIL AS A_CUSTOMER_EMAIL\n  ,CUSTOMER_NAME AS A_CUSTOMER_NAME\n  ,CUSTOMER_PHONE AS A_CUSTOMER_PHONE\n  ,CUSTOMER_SHIPPING AS A_CUSTOMER_SHIPPING\n  ,CUSTOMER_TAX_EXEMPT AS A_CUSTOMER_TAX_EXEMPT\n  ,CUSTOM_FIELDS AS A_CUSTOM_FIELDS\n  ,DUE_DATE AS A_DUE_DATE\n  ,FOOTER AS A_FOOTER\n  ,HOSTED_INVOICE_URL AS A_HOSTED_INVOICE_URL\n  ,INVOICE_PDF AS A_INVOICE_PDF\n  ,LAST_FINALIZATION_ERROR AS A_LAST_FINALIZATION_ERROR    \n  ,TRANSFER_DATA AS A_TRANSFER_DATA\n  ,WEBHOOKS_DELIVERED_AT::TIMESTAMP AS A_WEBHOOKS_DELIVERED_AT\n  ,ACCOUNT_TAX_IDS AS A_ACCOUNT_TAX_IDS\n  ,CUSTOMER_TAX_IDS AS A_CUSTOMER_TAX_IDS\n  --BOOLEAN  \n  ,ATTEMPTED AS B_ATTEMPTED\n  ,AUTO_ADVANCE AS B_AUTO_ADVANCE\n    --METRICS\n  ,AMOUNT_PAID AS M_AMOUNT_PAID\n  ,TOTAL_DISCOUNT_AMOUNTS AS M_TOTAL_DISCOUNT_AMOUNTS\n  ,TOTAL_TAX_AMOUNTS AS M_TOTAL_TAX_AMOUNTS\n  ,AMOUNT_DUE AS M_AMOUNT_DUE\n  ,AMOUNT_REMAINING AS M_AMOUNT_REMAINING\n  ,ATTEMPT_COUNT AS M_ATTEMPT_COUNT\n  ,ENDING_BALANCE AS M_ENDING_BALANCE\n  ,SUBTOTAL AS M_SUBTOTAL\n  ,TAX AS M_TAX\n  --METADATA\n  , '{{invocation_id}}' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  invoice I\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_stripe.DEMO_STRIPE.INVOICE"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "INVOICES", "V_STR_INVOICE_HEADER_STG"], "unique_id": "model.dlh_stripe.V_STR_INVOICE_HEADER_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/INVOICES/V_STR_INVOICE_HEADER_STG.sql", "original_file_path": "models/staging/INVOICES/V_STR_INVOICE_HEADER_STG.sql", "name": "V_STR_INVOICE_HEADER_STG", "alias": "V_STR_INVOICE_HEADER_STG", "checksum": {"name": "sha256", "checksum": "ffc003d1b494891e480c964da7429122254cf7c01627b7f7a3a38176cdcb7b47"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_STRIPE", "INVOICE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/INVOICES/V_STR_INVOICE_HEADER_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.132836, "compiled_sql": "\n\nWITH invoice AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"INVOICE\"\n),\nrename AS \n(\nSELECT  \n  --DLHK\n  MD5(ID) AS K_INVOICE_DLHK\n  ,MD5(CHARGE) AS K_CHARGE_DLHK\n  ,MD5(CUSTOMER) AS K_CUSTOMER_DLHK\n  ,MD5(SUBSCRIPTION) AS K_SUBSCRIPTION_DLHK\n  --BK\n  ,ID AS K_INVOICE_BK\n  ,CHARGE AS K_CHARGE_BK\n  ,CUSTOMER AS K_CUSTOMER_BK\n  ,SUBSCRIPTION AS K_SUBSCRIPTION_BK\n  --ATTRIBUTES\n  ,CREATED AS A_CREATED\n  ,ACCOUNT_COUNTRY AS A_ACCOUNT_COUNTRY\n  ,ACCOUNT_NAME AS A_ACCOUNT_NAME\n  ,BILLING_REASON AS A_BILLING_REASON\n  ,CURRENCY AS A_CURRENCY  \n  ,CUSTOMER_ADDRESS AS A_CUSTOMER_ADDRESS\n  ,CUSTOMER_EMAIL AS A_CUSTOMER_EMAIL\n  ,CUSTOMER_NAME AS A_CUSTOMER_NAME\n  ,CUSTOMER_PHONE AS A_CUSTOMER_PHONE\n  ,CUSTOMER_SHIPPING AS A_CUSTOMER_SHIPPING\n  ,CUSTOMER_TAX_EXEMPT AS A_CUSTOMER_TAX_EXEMPT\n  ,CUSTOM_FIELDS AS A_CUSTOM_FIELDS\n  ,DUE_DATE AS A_DUE_DATE\n  ,FOOTER AS A_FOOTER\n  ,HOSTED_INVOICE_URL AS A_HOSTED_INVOICE_URL\n  ,INVOICE_PDF AS A_INVOICE_PDF\n  ,LAST_FINALIZATION_ERROR AS A_LAST_FINALIZATION_ERROR    \n  ,TRANSFER_DATA AS A_TRANSFER_DATA\n  ,WEBHOOKS_DELIVERED_AT::TIMESTAMP AS A_WEBHOOKS_DELIVERED_AT\n  ,ACCOUNT_TAX_IDS AS A_ACCOUNT_TAX_IDS\n  ,CUSTOMER_TAX_IDS AS A_CUSTOMER_TAX_IDS\n  --BOOLEAN  \n  ,ATTEMPTED AS B_ATTEMPTED\n  ,AUTO_ADVANCE AS B_AUTO_ADVANCE\n    --METRICS\n  ,AMOUNT_PAID AS M_AMOUNT_PAID\n  ,TOTAL_DISCOUNT_AMOUNTS AS M_TOTAL_DISCOUNT_AMOUNTS\n  ,TOTAL_TAX_AMOUNTS AS M_TOTAL_TAX_AMOUNTS\n  ,AMOUNT_DUE AS M_AMOUNT_DUE\n  ,AMOUNT_REMAINING AS M_AMOUNT_REMAINING\n  ,ATTEMPT_COUNT AS M_ATTEMPT_COUNT\n  ,ENDING_BALANCE AS M_ENDING_BALANCE\n  ,SUBTOTAL AS M_SUBTOTAL\n  ,TAX AS M_TAX\n  --METADATA\n  , 'd749a898-8588-45dd-b961-f3cdae575aec' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  invoice I\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_INVOICE_HEADER_STG"}, "model.dlh_stripe.V_STR_PLAN_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH plans AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'PLAN')}}\n),\nproducts AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'PRODUCT')}}\n),\nrename AS \n(\nSELECT  \n  --DLHK   \n  MD5(plans.ID) AS K_PLAN_DLHK\n  ,plans.ID AS K_PLAN_BK\n  ,plans.PRODUCT_ID AS K_PRODUCT_BK\n  ,plans.AGGREGATE_USAGE AS A_AGGREGATE_USAGE\n  ,plans.BILLING_SCHEME AS A_BILLING_SCHEME\n  ,plans.CREATED AS A_CREATED_AT\n  ,plans.CURRENCY AS A_CURRENCY\n  ,plans.INTERVAL AS A_INTERVAL\n  ,plans.NICKNAME AS A_NICKNAME\n  ,plans.TRANSFORM_USAGE_ROUND AS A_TRANSFORM_USAGE_ROUND\n  ,plans.USAGE_TYPE AS A_USAGE_TYPE\n  ,plans.TRANSFORM_USAGE_DIVIDE_BY AS A_TRANSFORM_USAGE_DIVIDE_BY\n  ,products.CAPTION AS A_PRODUCT_CAPTION\n  ,products.CREATED AS A_PRODUCT_CREATED_AT\n  ,products.UPDATED AS A_PRODUCT_UPDATED_AT\n  ,products.DESCRIPTION AS A_PRODUCT_DESCRIPTION\n  ,products.NAME AS A_PRODUCT_NAME\n  ,products.STATEMENT_DESCRIPTOR AS A_PRODUCT_STATEMENT_DESCRIPTOR\n  ,products.TYPE AS A_PRODUCT_TYPE\n  ,products.UNIT_LABEL AS A_PRODUCT_UNIT_LABEL\n  ,products.URL AS A_PRODUCT_URL\n  --BOOLEAN\n  ,plans.ACTIVE AS B_ACTIVE\n  ,plans.IS_DELETED AS B_IS_DELETED\n  ,plans.LIVEMODE AS B_LIVEMODE  \n  ,products.ACTIVE AS B_PRODUCT_ACTIVE\n  ,products.IS_DELETED AS B_PRODUCT_IS_DELETED\n  ,products.LIVEMODE AS B_PRODUCT_LIVEMODE\n  ,products.SHIPPABLE AS B_PRODUCT_SHIPPABLE\n  --METRICS\n  ,plans.AMOUNT AS M_AMOUNT\n  ,plans.INTERVAL_COUNT AS M_INTERVAL_COUNT\n  ,plans.TRIAL_PERIOD_DAYS AS M_TRIAL_PERIOD_DAYS\n  ,products.PACKAGE_DIMENSIONS_WIDTH AS K_PRODUCT_PACKAGE_DIMENSIONS_WIDTH\n  ,products.PACKAGE_DIMENSIONS_HEIGHT AS M_PRODUCT_PACKAGE_DIMENSIONS_HEIGHT\n  ,products.PACKAGE_DIMENSIONS_LENGTH AS M_PRODUCT_PACKAGE_DIMENSIONS_LENGTH\n  ,products.PACKAGE_DIMENSIONS_WEIGHT AS M_PRODUCT_PACKAGE_DIMENSIONS_WEIGHT\n  --METADATA\n  , '{{invocation_id}}' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  plans\n  LEFT JOIN products ON products.ID = plans.PRODUCT_ID\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_stripe.DEMO_STRIPE.PLAN", "source.dlh_stripe.DEMO_STRIPE.PRODUCT"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "PLAN", "V_STR_PLAN_STG"], "unique_id": "model.dlh_stripe.V_STR_PLAN_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/PLAN/V_STR_PLAN_STG.sql", "original_file_path": "models/staging/PLAN/V_STR_PLAN_STG.sql", "name": "V_STR_PLAN_STG", "alias": "V_STR_PLAN_STG", "checksum": {"name": "sha256", "checksum": "20367a076d8b47bd3abeb02e5ac3820949f5a484406b880306a0c00b82e12ed6"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_STRIPE", "PLAN"], ["DEMO_STRIPE", "PRODUCT"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/PLAN/V_STR_PLAN_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.135679, "compiled_sql": "\n\nWITH plans AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"PLAN\"\n),\nproducts AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"PRODUCT\"\n),\nrename AS \n(\nSELECT  \n  --DLHK   \n  MD5(plans.ID) AS K_PLAN_DLHK\n  ,plans.ID AS K_PLAN_BK\n  ,plans.PRODUCT_ID AS K_PRODUCT_BK\n  ,plans.AGGREGATE_USAGE AS A_AGGREGATE_USAGE\n  ,plans.BILLING_SCHEME AS A_BILLING_SCHEME\n  ,plans.CREATED AS A_CREATED_AT\n  ,plans.CURRENCY AS A_CURRENCY\n  ,plans.INTERVAL AS A_INTERVAL\n  ,plans.NICKNAME AS A_NICKNAME\n  ,plans.TRANSFORM_USAGE_ROUND AS A_TRANSFORM_USAGE_ROUND\n  ,plans.USAGE_TYPE AS A_USAGE_TYPE\n  ,plans.TRANSFORM_USAGE_DIVIDE_BY AS A_TRANSFORM_USAGE_DIVIDE_BY\n  ,products.CAPTION AS A_PRODUCT_CAPTION\n  ,products.CREATED AS A_PRODUCT_CREATED_AT\n  ,products.UPDATED AS A_PRODUCT_UPDATED_AT\n  ,products.DESCRIPTION AS A_PRODUCT_DESCRIPTION\n  ,products.NAME AS A_PRODUCT_NAME\n  ,products.STATEMENT_DESCRIPTOR AS A_PRODUCT_STATEMENT_DESCRIPTOR\n  ,products.TYPE AS A_PRODUCT_TYPE\n  ,products.UNIT_LABEL AS A_PRODUCT_UNIT_LABEL\n  ,products.URL AS A_PRODUCT_URL\n  --BOOLEAN\n  ,plans.ACTIVE AS B_ACTIVE\n  ,plans.IS_DELETED AS B_IS_DELETED\n  ,plans.LIVEMODE AS B_LIVEMODE  \n  ,products.ACTIVE AS B_PRODUCT_ACTIVE\n  ,products.IS_DELETED AS B_PRODUCT_IS_DELETED\n  ,products.LIVEMODE AS B_PRODUCT_LIVEMODE\n  ,products.SHIPPABLE AS B_PRODUCT_SHIPPABLE\n  --METRICS\n  ,plans.AMOUNT AS M_AMOUNT\n  ,plans.INTERVAL_COUNT AS M_INTERVAL_COUNT\n  ,plans.TRIAL_PERIOD_DAYS AS M_TRIAL_PERIOD_DAYS\n  ,products.PACKAGE_DIMENSIONS_WIDTH AS K_PRODUCT_PACKAGE_DIMENSIONS_WIDTH\n  ,products.PACKAGE_DIMENSIONS_HEIGHT AS M_PRODUCT_PACKAGE_DIMENSIONS_HEIGHT\n  ,products.PACKAGE_DIMENSIONS_LENGTH AS M_PRODUCT_PACKAGE_DIMENSIONS_LENGTH\n  ,products.PACKAGE_DIMENSIONS_WEIGHT AS M_PRODUCT_PACKAGE_DIMENSIONS_WEIGHT\n  --METADATA\n  , 'd749a898-8588-45dd-b961-f3cdae575aec' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  plans\n  LEFT JOIN products ON products.ID = plans.PRODUCT_ID\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_PLAN_STG"}, "model.dlh_stripe.V_STR_DATE_STG": {"raw_sql": "{{ config (\r\n  materialized= 'view',\r\n  schema=var('target_schema'),\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\nSELECT \r\n     to_date('2015-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as DD, /*<<Modify date for preferred table start date*/\r\n      seq1() as Sl,row_number() over (order by Sl) as row_numbers,\r\n      dateadd(day,row_numbers,DD) as V_DATE,\r\n      case when date_part(dd, V_DATE) < 10 and date_part(mm, V_DATE) > 9 then\r\n        date_part(year, V_DATE)||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\r\n         when date_part(dd, V_DATE) < 10 and  date_part(mm, V_DATE) < 10 then \r\n         date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\r\n         when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) < 10 then\r\n         date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||date_part(dd, V_DATE)\r\n         when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) > 9 then\r\n         date_part(year, V_DATE)||date_part(mm, V_DATE)||date_part(dd, V_DATE) end as DATE_KEY,\r\n      V_DATE as DATE_COLUMN,\r\n      dayname(dateadd(day,row_numbers,DD)) as DAY_NAME_1,\r\n      case \r\n        when dayname(dateadd(day,row_numbers,DD)) = 'Mon' then 'Monday'\r\n        when dayname(dateadd(day,row_numbers,DD)) = 'Tue' then 'Tuesday'\r\n        when dayname(dateadd(day,row_numbers,DD)) = 'Wed' then 'Wednesday'\r\n        when dayname(dateadd(day,row_numbers,DD)) = 'Thu' then 'Thursday'\r\n        when dayname(dateadd(day,row_numbers,DD)) = 'Fri' then 'Friday'\r\n        when dayname(dateadd(day,row_numbers,DD)) = 'Sat' then 'Saturday'\r\n        when dayname(dateadd(day,row_numbers,DD)) = 'Sun' then 'Sunday' end ||', '||\r\n      case when monthname(dateadd(day,row_numbers,DD)) ='Jan' then 'January'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Feb' then 'February'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Mar' then 'March'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Apr' then 'April'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='May' then 'May'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Jun' then 'June'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Jul' then 'July'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Aug' then 'August'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Sep' then 'September'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Oct' then 'October'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Nov' then 'November'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Dec' then 'December' end\r\n           ||' '|| to_varchar(dateadd(day,row_numbers,DD), ' dd, yyyy') as FULL_DATE_DESC,\r\n      dateadd(day,row_numbers,DD) as V_DATE_1,\r\n      dayofweek(V_DATE_1)+1 as DAY_NUM_IN_WEEK,\r\n      Date_part(dd,V_DATE_1) as DAY_NUM_IN_MONTH,\r\n      dayofyear(V_DATE_1) as DAY_NUM_IN_YEAR,\r\n      case \r\n        when dayname(V_DATE_1) = 'Mon' then 'Monday'\r\n        when dayname(V_DATE_1) = 'Tue' then 'Tuesday'\r\n        when dayname(V_DATE_1) = 'Wed' then 'Wednesday'\r\n        when dayname(V_DATE_1) = 'Thu' then 'Thursday'\r\n        when dayname(V_DATE_1) = 'Fri' then 'Friday'\r\n        when dayname(V_DATE_1) = 'Sat' then 'Saturday'\r\n        when dayname(V_DATE_1) = 'Sun' then 'Sunday' end as DAY_NAME,\r\n      dayname(dateadd(day,row_numbers,DD)) as DAY_ABBREV,\r\n      case  \r\n        when dayname(V_DATE_1) = 'Sun' and dayname(V_DATE_1) = 'Sat' then \r\n                 'Not-Weekday'\r\n        else 'Weekday' end as WEEKDAY_IND,\r\n       case \r\n        when (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0704' or\r\n        DATE_KEY = date_part(year, V_DATE)||'1225' or DATE_KEY = date_part(year, V_DATE)||'1226') then  \r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Wed' \r\n        and dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1  then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Thu' \r\n        and dateadd(day,-3,last_day(V_DATE_1)) = V_DATE_1  then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Fri' \r\n        and dateadd(day,-4,last_day(V_DATE_1)) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sat' \r\n        and dateadd(day,-5,last_day(V_DATE_1)) = V_DATE_1  then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sun' \r\n        and dateadd(day,-6,last_day(V_DATE_1)) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Mon' \r\n        and last_day(V_DATE_1) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Tue' \r\n        and dateadd(day,-1 ,last_day(V_DATE_1)) = V_DATE_1  then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \r\n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \r\n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \r\n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \r\n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \r\n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \r\n        and date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \r\n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \r\n        and (dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  or \r\n           dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \r\n        and ( dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \r\n           dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \r\n        and ( dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \r\n           dateadd(day,20,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\r\n         'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \r\n        and ( dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \r\n           dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \r\n        and ( dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \r\n           dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \r\n        and (dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \r\n           dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \r\n        and (dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \r\n           dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\r\n         'Holiday'    \r\n        else\r\n        'Not-Holiday' end as US_HOLIDAY_IND,\r\n      /*Modify the following for Company Specific Holidays*/\r\n      case \r\n        when (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0219'\r\n        or DATE_KEY = date_part(year, V_DATE)||'0528' or DATE_KEY = date_part(year, V_DATE)||'0704' \r\n        or DATE_KEY = date_part(year, V_DATE)||'1225' )then \r\n        'Holiday'               \r\n                when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Fri' \r\n        and last_day(V_DATE_1) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sat' \r\n        and dateadd(day,-1,last_day(V_DATE_1)) = V_DATE_1  then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sun' \r\n        and dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue'\r\n                and dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \r\n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu'\r\n                and dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \r\n        and date_part(year, V_DATE_1)||'-04-01' = V_DATE_1 then\r\n        'Holiday'\r\n                when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \r\n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu' \r\n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \r\n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sat' \r\n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sun' \r\n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Mon' \r\n                and date_part(year, V_DATE_1)||'-04-01'= V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue' \r\n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\r\n        'Holiday'   \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \r\n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \r\n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \r\n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \r\n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \r\n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \r\n                and date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \r\n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \r\n        and dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \r\n        and dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \r\n        and dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\r\n         'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \r\n        and dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \r\n        and dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \r\n        and dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \r\n        and dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\r\n         'Holiday'     \r\n        else\r\n        'Not-Holiday' end as COMPANY_HOLIDAY_IND,\r\n      case                                           \r\n        when last_day(V_DATE_1) = V_DATE_1 then \r\n        'Month-end'\r\n        else 'Not-Month-end' end as MONTH_END_IND,\r\n          \r\n      case when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\r\n            date_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\r\n            date_part(mm,date_trunc('week',V_DATE_1))||'0'||\r\n            date_part(dd,date_trunc('week',V_DATE_1))  \r\n         when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\r\n            date_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\r\n            date_part(mm,date_trunc('week',V_DATE_1))||date_part(dd,date_trunc('week',V_DATE_1))    \r\n         when date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\r\n            date_part(yyyy,date_trunc('week',V_DATE_1))||date_part(mm,date_trunc('week',V_DATE_1))||\r\n            '0'||date_part(dd,date_trunc('week',V_DATE_1))    \r\n        when date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\r\n            date_part(yyyy,date_trunc('week',V_DATE_1))||\r\n            date_part(mm,date_trunc('week',V_DATE_1))||\r\n            date_part(dd,date_trunc('week',V_DATE_1)) end as WEEK_BEGIN_DATE_NKEY,\r\n      date_trunc('week',V_DATE_1) as WEEK_BEGIN_DATE,\r\n\r\n      case when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) < 10 then\r\n            date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\r\n            date_part(mm,last_day(V_DATE_1,'week'))||'0'||\r\n            date_part(dd,last_day(V_DATE_1,'week')) \r\n         when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\r\n            date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\r\n            date_part(mm,last_day(V_DATE_1,'week'))||date_part(dd,last_day(V_DATE_1,'week'))   \r\n         when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) < 10  then\r\n            date_part(yyyy,last_day(V_DATE_1,'week'))||date_part(mm,last_day(V_DATE_1,'week'))||'0'||\r\n            date_part(dd,last_day(V_DATE_1,'week'))   \r\n         when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\r\n            date_part(yyyy,last_day(V_DATE_1,'week'))||\r\n            date_part(mm,last_day(V_DATE_1,'week'))||\r\n            date_part(dd,last_day(V_DATE_1,'week')) end as WEEK_END_DATE_NKEY,\r\n      last_day(V_DATE_1,'week') as WEEK_END_DATE,\r\n      week(V_DATE_1) as WEEK_NUM_IN_YEAR,\r\n      case when monthname(V_DATE_1) ='Jan' then 'January'\r\n           when monthname(V_DATE_1) ='Feb' then 'February'\r\n           when monthname(V_DATE_1) ='Mar' then 'March'\r\n           when monthname(V_DATE_1) ='Apr' then 'April'\r\n           when monthname(V_DATE_1) ='May' then 'May'\r\n           when monthname(V_DATE_1) ='Jun' then 'June'\r\n           when monthname(V_DATE_1) ='Jul' then 'July'\r\n           when monthname(V_DATE_1) ='Aug' then 'August'\r\n           when monthname(V_DATE_1) ='Sep' then 'September'\r\n           when monthname(V_DATE_1) ='Oct' then 'October'\r\n           when monthname(V_DATE_1) ='Nov' then 'November'\r\n           when monthname(V_DATE_1) ='Dec' then 'December' end as MONTH_NAME,\r\n      monthname(V_DATE_1) as MONTH_ABBREV,\r\n      month(V_DATE_1) as MONTH_NUM_IN_YEAR,\r\n      case when month(V_DATE_1) < 10 then \r\n      year(V_DATE_1)||'-0'||month(V_DATE_1)   \r\n      else year(V_DATE_1)||'-'||month(V_DATE_1) end as YEARMONTH,\r\n      quarter(V_DATE_1) as CURRENT_QUARTER,\r\n      year(V_DATE_1)||'-0'||quarter(V_DATE_1) as YEARQUARTER,\r\n      year(V_DATE_1) as CURRENT_YEAR,\r\n      /*Modify the following based on company fiscal year - assumes Jan 01*/\r\n            to_date(year(V_DATE_1)||'-01-01','YYYY-MM-DD') as FISCAL_CUR_YEAR,\r\n            to_date(year(V_DATE_1) -1||'-01-01','YYYY-MM-DD') as FISCAL_PREV_YEAR,\r\n      case when   V_DATE_1 < FISCAL_CUR_YEAR then\r\n      datediff('week', FISCAL_PREV_YEAR,V_DATE_1)\r\n      else \r\n      datediff('week', FISCAL_CUR_YEAR,V_DATE_1)  end as FISCAL_WEEK_NUM  ,\r\n      decode(datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ,-2,10,-1,11,0,12,\r\n                   datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ) as FISCAL_MONTH_NUM,\r\n      concat( year(FISCAL_CUR_YEAR) \r\n           ,case when to_number(FISCAL_MONTH_NUM) = 10 or \r\n              to_number(FISCAL_MONTH_NUM) = 11 or \r\n                            to_number(FISCAL_MONTH_NUM) = 12  then\r\n              '-'||FISCAL_MONTH_NUM\r\n          else  concat('-0',FISCAL_MONTH_NUM) end ) as FISCAL_YEARMONTH,\r\n      case when quarter(V_DATE_1) = 4 then 4\r\n         when quarter(V_DATE_1) = 3 then 3\r\n         when quarter(V_DATE_1) = 2 then 2\r\n         when quarter(V_DATE_1) = 1 then 1 end as FISCAL_QUARTER,\r\n      \r\n      case when   V_DATE_1 < FISCAL_CUR_YEAR then\r\n          year(FISCAL_CUR_YEAR)\r\n          else year(FISCAL_CUR_YEAR)+1 end\r\n          ||'-0'||case when quarter(V_DATE_1) = 4 then 4\r\n           when quarter(V_DATE_1) = 3 then 3\r\n           when quarter(V_DATE_1) = 2 then 2\r\n           when quarter(V_DATE_1) = 1 then 1 end as FISCAL_YEARQUARTER,\r\n      case when quarter(V_DATE_1) = 4  then 2 when quarter(V_DATE_1) = 3 then 2\r\n        when quarter(V_DATE_1) = 1  then 1 when quarter(V_DATE_1) = 2 then 1\r\n      end as FISCAL_HALFYEAR,\r\n      year(FISCAL_CUR_YEAR) as FISCAL_YEAR,\r\n      to_timestamp_ntz(V_DATE) as SQL_TIMESTAMP,\r\n      'Y' as CURRENT_ROW_IND,\r\n      to_date(current_timestamp) as EFFECTIVE_DATE,\r\n      to_date('9999-12-31') as EXPIRA_DATE\r\n      from table(generator(rowcount => 8401)) /*<< Set to generate 20 years. Modify rowcount to increase or decrease size*/", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "DATE", "V_STR_DATE_STG"], "unique_id": "model.dlh_stripe.V_STR_DATE_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/DATE/V_STR_DATE_STG.sql", "original_file_path": "models/staging/DATE/V_STR_DATE_STG.sql", "name": "V_STR_DATE_STG", "alias": "V_STR_DATE_STG", "checksum": {"name": "sha256", "checksum": "673a6389624ee3005e08618b1b1b38915f63f9dcd2a292692df098b4c7244920"}, "tags": ["staging", "daily"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/DATE/V_STR_DATE_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.138398, "compiled_sql": "\n\nSELECT \n     to_date('2015-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as DD, /*<<Modify date for preferred table start date*/\n      seq1() as Sl,row_number() over (order by Sl) as row_numbers,\n      dateadd(day,row_numbers,DD) as V_DATE,\n      case when date_part(dd, V_DATE) < 10 and date_part(mm, V_DATE) > 9 then\n        date_part(year, V_DATE)||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\n         when date_part(dd, V_DATE) < 10 and  date_part(mm, V_DATE) < 10 then \n         date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\n         when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) < 10 then\n         date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||date_part(dd, V_DATE)\n         when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) > 9 then\n         date_part(year, V_DATE)||date_part(mm, V_DATE)||date_part(dd, V_DATE) end as DATE_KEY,\n      V_DATE as DATE_COLUMN,\n      dayname(dateadd(day,row_numbers,DD)) as DAY_NAME_1,\n      case \n        when dayname(dateadd(day,row_numbers,DD)) = 'Mon' then 'Monday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Tue' then 'Tuesday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Wed' then 'Wednesday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Thu' then 'Thursday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Fri' then 'Friday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Sat' then 'Saturday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Sun' then 'Sunday' end ||', '||\n      case when monthname(dateadd(day,row_numbers,DD)) ='Jan' then 'January'\n           when monthname(dateadd(day,row_numbers,DD)) ='Feb' then 'February'\n           when monthname(dateadd(day,row_numbers,DD)) ='Mar' then 'March'\n           when monthname(dateadd(day,row_numbers,DD)) ='Apr' then 'April'\n           when monthname(dateadd(day,row_numbers,DD)) ='May' then 'May'\n           when monthname(dateadd(day,row_numbers,DD)) ='Jun' then 'June'\n           when monthname(dateadd(day,row_numbers,DD)) ='Jul' then 'July'\n           when monthname(dateadd(day,row_numbers,DD)) ='Aug' then 'August'\n           when monthname(dateadd(day,row_numbers,DD)) ='Sep' then 'September'\n           when monthname(dateadd(day,row_numbers,DD)) ='Oct' then 'October'\n           when monthname(dateadd(day,row_numbers,DD)) ='Nov' then 'November'\n           when monthname(dateadd(day,row_numbers,DD)) ='Dec' then 'December' end\n           ||' '|| to_varchar(dateadd(day,row_numbers,DD), ' dd, yyyy') as FULL_DATE_DESC,\n      dateadd(day,row_numbers,DD) as V_DATE_1,\n      dayofweek(V_DATE_1)+1 as DAY_NUM_IN_WEEK,\n      Date_part(dd,V_DATE_1) as DAY_NUM_IN_MONTH,\n      dayofyear(V_DATE_1) as DAY_NUM_IN_YEAR,\n      case \n        when dayname(V_DATE_1) = 'Mon' then 'Monday'\n        when dayname(V_DATE_1) = 'Tue' then 'Tuesday'\n        when dayname(V_DATE_1) = 'Wed' then 'Wednesday'\n        when dayname(V_DATE_1) = 'Thu' then 'Thursday'\n        when dayname(V_DATE_1) = 'Fri' then 'Friday'\n        when dayname(V_DATE_1) = 'Sat' then 'Saturday'\n        when dayname(V_DATE_1) = 'Sun' then 'Sunday' end as DAY_NAME,\n      dayname(dateadd(day,row_numbers,DD)) as DAY_ABBREV,\n      case  \n        when dayname(V_DATE_1) = 'Sun' and dayname(V_DATE_1) = 'Sat' then \n                 'Not-Weekday'\n        else 'Weekday' end as WEEKDAY_IND,\n       case \n        when (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0704' or\n        DATE_KEY = date_part(year, V_DATE)||'1225' or DATE_KEY = date_part(year, V_DATE)||'1226') then  \n        'Holiday' \n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Wed' \n        and dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Thu' \n        and dateadd(day,-3,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Fri' \n        and dateadd(day,-4,last_day(V_DATE_1)) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sat' \n        and dateadd(day,-5,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sun' \n        and dateadd(day,-6,last_day(V_DATE_1)) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Mon' \n        and last_day(V_DATE_1) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Tue' \n        and dateadd(day,-1 ,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \n        and date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \n        and (dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  or \n           dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \n        and ( dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \n        and ( dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,20,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n         'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \n        and ( dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \n        and ( dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \n        and (dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \n        and (dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n         'Holiday'    \n        else\n        'Not-Holiday' end as US_HOLIDAY_IND,\n      /*Modify the following for Company Specific Holidays*/\n      case \n        when (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0219'\n        or DATE_KEY = date_part(year, V_DATE)||'0528' or DATE_KEY = date_part(year, V_DATE)||'0704' \n        or DATE_KEY = date_part(year, V_DATE)||'1225' )then \n        'Holiday'               \n                when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Fri' \n        and last_day(V_DATE_1) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sat' \n        and dateadd(day,-1,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sun' \n        and dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue'\n                and dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu'\n                and dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \n        and date_part(year, V_DATE_1)||'-04-01' = V_DATE_1 then\n        'Holiday'\n                when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu' \n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sat' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sun' \n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Mon' \n                and date_part(year, V_DATE_1)||'-04-01'= V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue' \n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday'   \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \n                and date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \n        and dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \n        and dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \n        and dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\n         'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \n        and dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \n        and dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \n        and dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \n        and dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\n         'Holiday'     \n        else\n        'Not-Holiday' end as COMPANY_HOLIDAY_IND,\n      case                                           \n        when last_day(V_DATE_1) = V_DATE_1 then \n        'Month-end'\n        else 'Not-Month-end' end as MONTH_END_IND,\n          \n      case when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\n            date_part(mm,date_trunc('week',V_DATE_1))||'0'||\n            date_part(dd,date_trunc('week',V_DATE_1))  \n         when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\n            date_part(mm,date_trunc('week',V_DATE_1))||date_part(dd,date_trunc('week',V_DATE_1))    \n         when date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||date_part(mm,date_trunc('week',V_DATE_1))||\n            '0'||date_part(dd,date_trunc('week',V_DATE_1))    \n        when date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||\n            date_part(mm,date_trunc('week',V_DATE_1))||\n            date_part(dd,date_trunc('week',V_DATE_1)) end as WEEK_BEGIN_DATE_NKEY,\n      date_trunc('week',V_DATE_1) as WEEK_BEGIN_DATE,\n\n      case when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) < 10 then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\n            date_part(mm,last_day(V_DATE_1,'week'))||'0'||\n            date_part(dd,last_day(V_DATE_1,'week')) \n         when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\n            date_part(mm,last_day(V_DATE_1,'week'))||date_part(dd,last_day(V_DATE_1,'week'))   \n         when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) < 10  then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||date_part(mm,last_day(V_DATE_1,'week'))||'0'||\n            date_part(dd,last_day(V_DATE_1,'week'))   \n         when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||\n            date_part(mm,last_day(V_DATE_1,'week'))||\n            date_part(dd,last_day(V_DATE_1,'week')) end as WEEK_END_DATE_NKEY,\n      last_day(V_DATE_1,'week') as WEEK_END_DATE,\n      week(V_DATE_1) as WEEK_NUM_IN_YEAR,\n      case when monthname(V_DATE_1) ='Jan' then 'January'\n           when monthname(V_DATE_1) ='Feb' then 'February'\n           when monthname(V_DATE_1) ='Mar' then 'March'\n           when monthname(V_DATE_1) ='Apr' then 'April'\n           when monthname(V_DATE_1) ='May' then 'May'\n           when monthname(V_DATE_1) ='Jun' then 'June'\n           when monthname(V_DATE_1) ='Jul' then 'July'\n           when monthname(V_DATE_1) ='Aug' then 'August'\n           when monthname(V_DATE_1) ='Sep' then 'September'\n           when monthname(V_DATE_1) ='Oct' then 'October'\n           when monthname(V_DATE_1) ='Nov' then 'November'\n           when monthname(V_DATE_1) ='Dec' then 'December' end as MONTH_NAME,\n      monthname(V_DATE_1) as MONTH_ABBREV,\n      month(V_DATE_1) as MONTH_NUM_IN_YEAR,\n      case when month(V_DATE_1) < 10 then \n      year(V_DATE_1)||'-0'||month(V_DATE_1)   \n      else year(V_DATE_1)||'-'||month(V_DATE_1) end as YEARMONTH,\n      quarter(V_DATE_1) as CURRENT_QUARTER,\n      year(V_DATE_1)||'-0'||quarter(V_DATE_1) as YEARQUARTER,\n      year(V_DATE_1) as CURRENT_YEAR,\n      /*Modify the following based on company fiscal year - assumes Jan 01*/\n            to_date(year(V_DATE_1)||'-01-01','YYYY-MM-DD') as FISCAL_CUR_YEAR,\n            to_date(year(V_DATE_1) -1||'-01-01','YYYY-MM-DD') as FISCAL_PREV_YEAR,\n      case when   V_DATE_1 < FISCAL_CUR_YEAR then\n      datediff('week', FISCAL_PREV_YEAR,V_DATE_1)\n      else \n      datediff('week', FISCAL_CUR_YEAR,V_DATE_1)  end as FISCAL_WEEK_NUM  ,\n      decode(datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ,-2,10,-1,11,0,12,\n                   datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ) as FISCAL_MONTH_NUM,\n      concat( year(FISCAL_CUR_YEAR) \n           ,case when to_number(FISCAL_MONTH_NUM) = 10 or \n              to_number(FISCAL_MONTH_NUM) = 11 or \n                            to_number(FISCAL_MONTH_NUM) = 12  then\n              '-'||FISCAL_MONTH_NUM\n          else  concat('-0',FISCAL_MONTH_NUM) end ) as FISCAL_YEARMONTH,\n      case when quarter(V_DATE_1) = 4 then 4\n         when quarter(V_DATE_1) = 3 then 3\n         when quarter(V_DATE_1) = 2 then 2\n         when quarter(V_DATE_1) = 1 then 1 end as FISCAL_QUARTER,\n      \n      case when   V_DATE_1 < FISCAL_CUR_YEAR then\n          year(FISCAL_CUR_YEAR)\n          else year(FISCAL_CUR_YEAR)+1 end\n          ||'-0'||case when quarter(V_DATE_1) = 4 then 4\n           when quarter(V_DATE_1) = 3 then 3\n           when quarter(V_DATE_1) = 2 then 2\n           when quarter(V_DATE_1) = 1 then 1 end as FISCAL_YEARQUARTER,\n      case when quarter(V_DATE_1) = 4  then 2 when quarter(V_DATE_1) = 3 then 2\n        when quarter(V_DATE_1) = 1  then 1 when quarter(V_DATE_1) = 2 then 1\n      end as FISCAL_HALFYEAR,\n      year(FISCAL_CUR_YEAR) as FISCAL_YEAR,\n      to_timestamp_ntz(V_DATE) as SQL_TIMESTAMP,\n      'Y' as CURRENT_ROW_IND,\n      to_date(current_timestamp) as EFFECTIVE_DATE,\n      to_date('9999-12-31') as EXPIRA_DATE\n      from table(generator(rowcount => 8401)) /*<< Set to generate 20 years. Modify rowcount to increase or decrease size*/", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_DATE_STG"}, "model.dlh_stripe.V_STR_PAYMENT_METHOD_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH payment_method AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'PAYMENT_METHOD')}}\n),\npayment_method_card AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'PAYMENT_METHOD_CARD')}}\n),\nrename AS \n(\nSELECT  \n  --DLHK  \n  MD5(P.ID) AS K_PAYMENT_METHOD_DLHK\n  ,MD5(P.CUSTOMER) AS K_CUSTOMER_DLHK\n  ,MD5(C.ID) AS K_PAYMENT_METHOD_CARD_DLHK\n  --BUSINESS KEYS\n  ,P.ID AS K_PAYMENT_METHOD_BK\n  ,P.CUSTOMER AS K_CUSTOMER_BK\n  ,C.ID AS K_PAYMENT_METHOD_CARD_BK\n  --ATTRIBUTES\n  ,P.BILLING_DETAIL_ADDRESS_CITY AS A_BILLING_DETAIL_ADDRESS_CITY\n  ,P.BILLING_DETAIL_ADDRESS_COUNTRY AS A_BILLING_DETAIL_ADDRESS_COUNTRY\n  ,P.BILLING_DETAIL_ADDRESS_LINE_1 AS A_BILLING_DETAIL_ADDRESS_LINE_1\n  ,P.BILLING_DETAIL_ADDRESS_LINE_2 AS A_BILLING_DETAIL_ADDRESS_LINE_2\n  ,P.BILLING_DETAIL_ADDRESS_POSTAL_CODE AS A_BILLING_DETAIL_ADDRESS_POSTAL_CODE\n  ,P.BILLING_DETAIL_ADDRESS_STATE AS A_BILLING_DETAIL_ADDRESS_STATE\n  ,P.BILLING_DETAIL_EMAIL AS A_BILLING_DETAIL_EMAIL\n  ,P.BILLING_DETAIL_NAME AS A_BILLING_DETAIL_NAME\n  ,P.BILLING_DETAIL_PHONE AS A_BILLING_DETAIL_PHONE\n  ,P.CREATED AS A_CREATED_AT  \n  ,P.CREATED::DATE AS A_CREATED_DATE_AT\n  ,P.METHOD_TYPE AS A_METHOD_TYPE\n  ,P.LIVEMODE AS B_LIVEMODE\n  ,C.FINGERPRINT AS A_CARD_FINGERPRINT\n  ,C.FUNDING AS A_CARD_FUNDING\n  ,C.DESCRIPTION AS A_CARD_DESCRIPTION\n  ,C.BRAND AS A_CARD_BRAND\n  ,C.WALLET_TYPE AS A_CARD_WALLET_TYPE\n  --METADATA\n  , '{{invocation_id}}' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  payment_method P\n  LEFT JOIN payment_method_card C ON C.PAYMENT_METHOD_ID = P.ID\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_stripe.DEMO_STRIPE.PAYMENT_METHOD", "source.dlh_stripe.DEMO_STRIPE.PAYMENT_METHOD_CARD"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "PAYMENT_METHOD", "V_STR_PAYMENT_METHOD_STG"], "unique_id": "model.dlh_stripe.V_STR_PAYMENT_METHOD_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/PAYMENT_METHOD/V_STR_PAYMENT_METHOD_STG.sql", "original_file_path": "models/staging/PAYMENT_METHOD/V_STR_PAYMENT_METHOD_STG.sql", "name": "V_STR_PAYMENT_METHOD_STG", "alias": "V_STR_PAYMENT_METHOD_STG", "checksum": {"name": "sha256", "checksum": "56bc4e41a000ae4a2a645d8e0e2415d1e276b2a502fd7f293e245f6f4badc9b1"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_STRIPE", "PAYMENT_METHOD"], ["DEMO_STRIPE", "PAYMENT_METHOD_CARD"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/PAYMENT_METHOD/V_STR_PAYMENT_METHOD_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.143023, "compiled_sql": "\n\nWITH payment_method AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"PAYMENT_METHOD\"\n),\npayment_method_card AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"PAYMENT_METHOD_CARD\"\n),\nrename AS \n(\nSELECT  \n  --DLHK  \n  MD5(P.ID) AS K_PAYMENT_METHOD_DLHK\n  ,MD5(P.CUSTOMER) AS K_CUSTOMER_DLHK\n  ,MD5(C.ID) AS K_PAYMENT_METHOD_CARD_DLHK\n  --BUSINESS KEYS\n  ,P.ID AS K_PAYMENT_METHOD_BK\n  ,P.CUSTOMER AS K_CUSTOMER_BK\n  ,C.ID AS K_PAYMENT_METHOD_CARD_BK\n  --ATTRIBUTES\n  ,P.BILLING_DETAIL_ADDRESS_CITY AS A_BILLING_DETAIL_ADDRESS_CITY\n  ,P.BILLING_DETAIL_ADDRESS_COUNTRY AS A_BILLING_DETAIL_ADDRESS_COUNTRY\n  ,P.BILLING_DETAIL_ADDRESS_LINE_1 AS A_BILLING_DETAIL_ADDRESS_LINE_1\n  ,P.BILLING_DETAIL_ADDRESS_LINE_2 AS A_BILLING_DETAIL_ADDRESS_LINE_2\n  ,P.BILLING_DETAIL_ADDRESS_POSTAL_CODE AS A_BILLING_DETAIL_ADDRESS_POSTAL_CODE\n  ,P.BILLING_DETAIL_ADDRESS_STATE AS A_BILLING_DETAIL_ADDRESS_STATE\n  ,P.BILLING_DETAIL_EMAIL AS A_BILLING_DETAIL_EMAIL\n  ,P.BILLING_DETAIL_NAME AS A_BILLING_DETAIL_NAME\n  ,P.BILLING_DETAIL_PHONE AS A_BILLING_DETAIL_PHONE\n  ,P.CREATED AS A_CREATED_AT  \n  ,P.CREATED::DATE AS A_CREATED_DATE_AT\n  ,P.METHOD_TYPE AS A_METHOD_TYPE\n  ,P.LIVEMODE AS B_LIVEMODE\n  ,C.FINGERPRINT AS A_CARD_FINGERPRINT\n  ,C.FUNDING AS A_CARD_FUNDING\n  ,C.DESCRIPTION AS A_CARD_DESCRIPTION\n  ,C.BRAND AS A_CARD_BRAND\n  ,C.WALLET_TYPE AS A_CARD_WALLET_TYPE\n  --METADATA\n  , 'd749a898-8588-45dd-b961-f3cdae575aec' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  payment_method P\n  LEFT JOIN payment_method_card C ON C.PAYMENT_METHOD_ID = P.ID\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_PAYMENT_METHOD_STG"}, "model.dlh_stripe.V_STR_SUBSCRIPTION_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH subscription AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'SUBSCRIPTION')}}\n),\nsubscription_item AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'SUBSCRIPTION_ITEM')}}\n),\nrename AS \n(\nSELECT  \n  --DLHK\n  MD5(I.ID) AS K_SUBSCRIPTION_ITEM_DLHK\n  ,MD5(S.ID) AS K_SUBSCRIPTION_DLHK\n  ,MD5(S.CUSTOMER_ID) AS K_CUSTOMER_DLHK\n  ,MD5(I.PLAN_ID) AS K_PLAN_DLHK\n  --BK\n  ,S.ID AS K_SUBSCRIPTION_BK\n  ,S.CUSTOMER_ID AS K_CUSTOMER_BK\n  ,S.DEFAULT_SOURCE_ID AS K_DEFAULT_SOURCE_BK\n  ,I.PLAN_ID AS K_PLAN_BK\n  --ATTRIBUTES\n  ,S.BILLING_CYCLE_ANCHOR AS A_BILLING_CYCLE_ANCHOR\n  ,S.CREATED AS A_CREATED_AT\n  ,S.CREATED::DATE AS A_CREATED_DATE_AT\n  ,S.CURRENT_PERIOD_END AS A_CURRENT_PERIOD_END\n  ,S.CURRENT_PERIOD_START AS A_CURRENT_PERIOD_START\n  ,S.START_DATE AS A_START_DATE\n  ,S.ENDED_AT AS A_ENDED_AT\n  ,S.STATUS AS A_STATUS\n  ,S.TRIAL_START AS A_TRIAL_START  \n  ,S.TRIAL_END AS A_TRIAL_END\n  ,S.CANCELED_AT AS A_CANCELED_AT\n  ,S.CANCEL_AT AS A_CANCEL_AT\n  ,I.CREATED AS A_ITEM_CREATED_AT\n  ,I.CREATED::DATE AS A_ITEM_CREATED_DATE_AT\n  --BOOLEAN\n  ,S.BILLING_THRESHOLD_RESET_BILLING_CYCLE_ANCHOR AS B_BILLING_THRESHOLD_RESET_BILLING_CYCLE_ANCHOR\n  ,S.CANCEL_AT_PERIOD_END AS B_CANCEL_AT_PERIOD_END\n  ,S.LIVEMODE AS B_LIVEMODE\n  --METRICS\n  ,S.APPLICATION_FEE_PERCENT AS M_APPLICATION_FEE_PERCENT\n  ,S.BILLING_THRESHOLD_AMOUNT_GTE AS M_BILLING_THRESHOLD_AMOUNT_GTE\n  ,S.DAYS_UNTIL_DUE AS M_DAYS_UNTIL_DUE\n  ,I.BILLING_THRESHOLDS_AMOUNT_GTE AS M_ITEM_BILLING_THRESHOLDS_AMOUNT_GTE\n  ,I.QUANTITY AS M_ITEM_QUANTITY \n  --METADATA\n  , '{{invocation_id}}' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  subscription S\n  LEFT JOIN subscription_item I on I.SUBSCRIPTION_ID = S.ID\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_stripe.DEMO_STRIPE.SUBSCRIPTION", "source.dlh_stripe.DEMO_STRIPE.SUBSCRIPTION_ITEM"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "SUBSCRIPTION", "V_STR_SUBSCRIPTION_STG"], "unique_id": "model.dlh_stripe.V_STR_SUBSCRIPTION_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/SUBSCRIPTION/V_STR_SUBSCRIPTION_STG.sql", "original_file_path": "models/staging/SUBSCRIPTION/V_STR_SUBSCRIPTION_STG.sql", "name": "V_STR_SUBSCRIPTION_STG", "alias": "V_STR_SUBSCRIPTION_STG", "checksum": {"name": "sha256", "checksum": "d85f69cc4c5ace671e728b8711904394b2e5c1789b3b7fb8af60914092d0d15e"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_STRIPE", "SUBSCRIPTION"], ["DEMO_STRIPE", "SUBSCRIPTION_ITEM"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/SUBSCRIPTION/V_STR_SUBSCRIPTION_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.145785, "compiled_sql": "\n\nWITH subscription AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"SUBSCRIPTION\"\n),\nsubscription_item AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"SUBSCRIPTION_ITEM\"\n),\nrename AS \n(\nSELECT  \n  --DLHK\n  MD5(I.ID) AS K_SUBSCRIPTION_ITEM_DLHK\n  ,MD5(S.ID) AS K_SUBSCRIPTION_DLHK\n  ,MD5(S.CUSTOMER_ID) AS K_CUSTOMER_DLHK\n  ,MD5(I.PLAN_ID) AS K_PLAN_DLHK\n  --BK\n  ,S.ID AS K_SUBSCRIPTION_BK\n  ,S.CUSTOMER_ID AS K_CUSTOMER_BK\n  ,S.DEFAULT_SOURCE_ID AS K_DEFAULT_SOURCE_BK\n  ,I.PLAN_ID AS K_PLAN_BK\n  --ATTRIBUTES\n  ,S.BILLING_CYCLE_ANCHOR AS A_BILLING_CYCLE_ANCHOR\n  ,S.CREATED AS A_CREATED_AT\n  ,S.CREATED::DATE AS A_CREATED_DATE_AT\n  ,S.CURRENT_PERIOD_END AS A_CURRENT_PERIOD_END\n  ,S.CURRENT_PERIOD_START AS A_CURRENT_PERIOD_START\n  ,S.START_DATE AS A_START_DATE\n  ,S.ENDED_AT AS A_ENDED_AT\n  ,S.STATUS AS A_STATUS\n  ,S.TRIAL_START AS A_TRIAL_START  \n  ,S.TRIAL_END AS A_TRIAL_END\n  ,S.CANCELED_AT AS A_CANCELED_AT\n  ,S.CANCEL_AT AS A_CANCEL_AT\n  ,I.CREATED AS A_ITEM_CREATED_AT\n  ,I.CREATED::DATE AS A_ITEM_CREATED_DATE_AT\n  --BOOLEAN\n  ,S.BILLING_THRESHOLD_RESET_BILLING_CYCLE_ANCHOR AS B_BILLING_THRESHOLD_RESET_BILLING_CYCLE_ANCHOR\n  ,S.CANCEL_AT_PERIOD_END AS B_CANCEL_AT_PERIOD_END\n  ,S.LIVEMODE AS B_LIVEMODE\n  --METRICS\n  ,S.APPLICATION_FEE_PERCENT AS M_APPLICATION_FEE_PERCENT\n  ,S.BILLING_THRESHOLD_AMOUNT_GTE AS M_BILLING_THRESHOLD_AMOUNT_GTE\n  ,S.DAYS_UNTIL_DUE AS M_DAYS_UNTIL_DUE\n  ,I.BILLING_THRESHOLDS_AMOUNT_GTE AS M_ITEM_BILLING_THRESHOLDS_AMOUNT_GTE\n  ,I.QUANTITY AS M_ITEM_QUANTITY \n  --METADATA\n  , 'd749a898-8588-45dd-b961-f3cdae575aec' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  subscription S\n  LEFT JOIN subscription_item I on I.SUBSCRIPTION_ID = S.ID\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_SUBSCRIPTION_STG"}, "model.dlh_stripe.V_STR_BALANCE_TRANSACTIONS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH balance_transactions AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'BALANCE_TRANSACTION')}}\n),\nrename AS \n(\nSELECT  \nMD5(ID) AS K_BALANCE_TRANSACTION_DLHK\n,MD5(SOURCE) AS K_SOURCE_DLHK\n,ID AS K_BALANCE_TRANSACTION_BK\n,SOURCE AS K_SOURCE_BK\n,AVAILABLE_ON AS A_AVAILABLE_ON\n,CREATED AS A_CREATED_AT\n,CREATED::DATE AS A_CREATED_DATE_AT\n,CURRENCY AS A_CURRENCY\n,DESCRIPTION AS A_DESCRIPTION\n,REPORTING_CATEGORY AS A_REPORTING_CATEGORY\n,STATUS AS A_STATUS\n,TRANSACTION_TYPE AS A_TRANSACTION_TYPE\n--METRICS\n,DIV0(AMOUNT,100) AS M_AMOUNT\n,EXCHANGE_RATE AS M_EXCHANGE_RATE\n,DIV0(NET,100) AS M_NET\n  --METADATA\n  , '{{invocation_id}}' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  balance_transactions T\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_stripe.DEMO_STRIPE.BALANCE_TRANSACTION"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "BALANCE_TRANSACTION", "V_STR_BALANCE_TRANSACTIONS_STG"], "unique_id": "model.dlh_stripe.V_STR_BALANCE_TRANSACTIONS_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/BALANCE_TRANSACTION/V_STR_BALANCE_TRANSACTIONS_STG.sql", "original_file_path": "models/staging/BALANCE_TRANSACTION/V_STR_BALANCE_TRANSACTIONS_STG.sql", "name": "V_STR_BALANCE_TRANSACTIONS_STG", "alias": "V_STR_BALANCE_TRANSACTIONS_STG", "checksum": {"name": "sha256", "checksum": "1b39a90f91808df8d40ab6892fed3e0cfe8a7a06609b18f20f7dce202d8b126b"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_STRIPE", "BALANCE_TRANSACTION"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/BALANCE_TRANSACTION/V_STR_BALANCE_TRANSACTIONS_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.14842, "compiled_sql": "\n\nWITH balance_transactions AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"BALANCE_TRANSACTION\"\n),\nrename AS \n(\nSELECT  \nMD5(ID) AS K_BALANCE_TRANSACTION_DLHK\n,MD5(SOURCE) AS K_SOURCE_DLHK\n,ID AS K_BALANCE_TRANSACTION_BK\n,SOURCE AS K_SOURCE_BK\n,AVAILABLE_ON AS A_AVAILABLE_ON\n,CREATED AS A_CREATED_AT\n,CREATED::DATE AS A_CREATED_DATE_AT\n,CURRENCY AS A_CURRENCY\n,DESCRIPTION AS A_DESCRIPTION\n,REPORTING_CATEGORY AS A_REPORTING_CATEGORY\n,STATUS AS A_STATUS\n,TRANSACTION_TYPE AS A_TRANSACTION_TYPE\n--METRICS\n,DIV0(AMOUNT,100) AS M_AMOUNT\n,EXCHANGE_RATE AS M_EXCHANGE_RATE\n,DIV0(NET,100) AS M_NET\n  --METADATA\n  , 'd749a898-8588-45dd-b961-f3cdae575aec' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  balance_transactions T\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_BALANCE_TRANSACTIONS_STG"}, "model.dlh_stripe.V_STR_REFUND_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH refund AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'REFUND')}}\n),\nrename AS \n(\nSELECT  \n  --DLHK  \n  MD5(ID) AS K_REFUND_DLHK\n  ,MD5(TRIM(BALANCE_TRANSACTION)) AS K_BALANCE_TRANSACTION_DLHK\n  ,MD5(TRIM(CHARGE)) AS K_CHARGE_DLHK\n  ,MD5(REPLACE(TRIM(PAYMENT_INTENT), '\"','')) AS K_PAYMENT_INTENT_DLHK\n  --BUSINESS KEYS\n  ,ID AS K_REFUND_BK\n  ,TRIM(BALANCE_TRANSACTION) AS K_BALANCE_TRANSACTION_BK\n  ,TRIM(CHARGE) AS K_CHARGE_BK\n  ,REPLACE(TRIM(PAYMENT_INTENT), '\"','') AS K_PAYMENT_INTENT_BK\n  --ATTRIBUTES  \n  ,CREATED AS A_CREATED_AT\n  ,CURRENCY AS A_CURRENCY\n  ,DESCRIPTION AS A_DESCRIPTION\n  ,METADATA AS A_METADATA  \n  ,REASON AS A_REASON\n  ,RECEIPT_NUMBER AS A_RECEIPT_NUMBER\n  ,STATUS AS A_STATUS\n  --METRICS\n  ,DIV0(AMOUNT,100) AS M_AMOUNT\n  --METADATA\n  , '{{invocation_id}}' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  refund P\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_stripe.DEMO_STRIPE.REFUND"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "REFUND", "V_STR_REFUND_STG"], "unique_id": "model.dlh_stripe.V_STR_REFUND_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/REFUND/V_STR_REFUND_STG.sql", "original_file_path": "models/staging/REFUND/V_STR_REFUND_STG.sql", "name": "V_STR_REFUND_STG", "alias": "V_STR_REFUND_STG", "checksum": {"name": "sha256", "checksum": "68fcef1e05eafe4f1b2e39e58be6c8d2f7d6b870af619fe74a30c1096285111c"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_STRIPE", "REFUND"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/REFUND/V_STR_REFUND_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.151061, "compiled_sql": "\n\nWITH refund AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"REFUND\"\n),\nrename AS \n(\nSELECT  \n  --DLHK  \n  MD5(ID) AS K_REFUND_DLHK\n  ,MD5(TRIM(BALANCE_TRANSACTION)) AS K_BALANCE_TRANSACTION_DLHK\n  ,MD5(TRIM(CHARGE)) AS K_CHARGE_DLHK\n  ,MD5(REPLACE(TRIM(PAYMENT_INTENT), '\"','')) AS K_PAYMENT_INTENT_DLHK\n  --BUSINESS KEYS\n  ,ID AS K_REFUND_BK\n  ,TRIM(BALANCE_TRANSACTION) AS K_BALANCE_TRANSACTION_BK\n  ,TRIM(CHARGE) AS K_CHARGE_BK\n  ,REPLACE(TRIM(PAYMENT_INTENT), '\"','') AS K_PAYMENT_INTENT_BK\n  --ATTRIBUTES  \n  ,CREATED AS A_CREATED_AT\n  ,CURRENCY AS A_CURRENCY\n  ,DESCRIPTION AS A_DESCRIPTION\n  ,METADATA AS A_METADATA  \n  ,REASON AS A_REASON\n  ,RECEIPT_NUMBER AS A_RECEIPT_NUMBER\n  ,STATUS AS A_STATUS\n  --METRICS\n  ,DIV0(AMOUNT,100) AS M_AMOUNT\n  --METADATA\n  , 'd749a898-8588-45dd-b961-f3cdae575aec' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  refund P\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_REFUND_STG"}, "model.dlh_stripe.V_STR_PAYOUT_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH payout AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'PAYOUT')}}\n),\nrename AS \n(\nSELECT  \n  --DLHK\n  MD5(ID) AS K_PAYOUT_DLHK \n  ,MD5(BALANCE_TRANSACTION_ID) AS K_BALANCE_TRANSACTION_DLHK\n  ,MD5(FAILURE_BALANCE_TRANSACTION_ID) AS K_FAILURE_BALANCE_TRANSACTION_DLHK\n  --BUSINESS KEYS\n  ,ID AS K_PAYOUT_BK\n  ,BALANCE_TRANSACTION_ID AS K_BALANCE_TRANSACTION_BK\n  ,FAILURE_BALANCE_TRANSACTION_ID AS K_FAILURE_BALANCE_TRANSACTION_BK  \n  --ATTRIBUTES\n  ,ARRIVAL_DATE AS A_ARRIVAL_DATE\n  ,CREATED AS A_CREATED_AT\n  ,CURRENCY AS A_CURRENCY\n  ,DESCRIPTION AS A_DESCRIPTION\n  ,FAILURE_CODE AS A_FAILURE_CODE\n  ,FAILURE_MESSAGE AS A_FAILURE_MESSAGE\n  ,METHOD AS A_METHOD\n  ,SOURCE_TYPE AS A_SOURCE_TYPE\n  ,STATEMENT_DESCRIPTOR AS A_STATEMENT_DESCRIPTOR\n  ,STATUS AS A_STATUS\n  ,TYPE AS A_TYPE\n  --BOOLEAN  \n  ,AUTOMATIC AS B_AUTOMATIC\n  ,LIVEMODE AS B_LIVEMODE\n  --AMOUNT\n  ,DIV0(AMOUNT,100) AS M_AMOUNT\n  --METADATA\n  , '{{invocation_id}}' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  payout P\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_stripe.DEMO_STRIPE.PAYOUT"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "PAYOUT", "V_STR_PAYOUT_STG"], "unique_id": "model.dlh_stripe.V_STR_PAYOUT_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/PAYOUT/V_STR_PAYOUT_STG.sql", "original_file_path": "models/staging/PAYOUT/V_STR_PAYOUT_STG.sql", "name": "V_STR_PAYOUT_STG", "alias": "V_STR_PAYOUT_STG", "checksum": {"name": "sha256", "checksum": "97ccde721ec91d00ac93d635e518f3e8798bf45db6acef5eec84f5a9d14c20f5"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_STRIPE", "PAYOUT"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/PAYOUT/V_STR_PAYOUT_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.153566, "compiled_sql": "\n\nWITH payout AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"PAYOUT\"\n),\nrename AS \n(\nSELECT  \n  --DLHK\n  MD5(ID) AS K_PAYOUT_DLHK \n  ,MD5(BALANCE_TRANSACTION_ID) AS K_BALANCE_TRANSACTION_DLHK\n  ,MD5(FAILURE_BALANCE_TRANSACTION_ID) AS K_FAILURE_BALANCE_TRANSACTION_DLHK\n  --BUSINESS KEYS\n  ,ID AS K_PAYOUT_BK\n  ,BALANCE_TRANSACTION_ID AS K_BALANCE_TRANSACTION_BK\n  ,FAILURE_BALANCE_TRANSACTION_ID AS K_FAILURE_BALANCE_TRANSACTION_BK  \n  --ATTRIBUTES\n  ,ARRIVAL_DATE AS A_ARRIVAL_DATE\n  ,CREATED AS A_CREATED_AT\n  ,CURRENCY AS A_CURRENCY\n  ,DESCRIPTION AS A_DESCRIPTION\n  ,FAILURE_CODE AS A_FAILURE_CODE\n  ,FAILURE_MESSAGE AS A_FAILURE_MESSAGE\n  ,METHOD AS A_METHOD\n  ,SOURCE_TYPE AS A_SOURCE_TYPE\n  ,STATEMENT_DESCRIPTOR AS A_STATEMENT_DESCRIPTOR\n  ,STATUS AS A_STATUS\n  ,TYPE AS A_TYPE\n  --BOOLEAN  \n  ,AUTOMATIC AS B_AUTOMATIC\n  ,LIVEMODE AS B_LIVEMODE\n  --AMOUNT\n  ,DIV0(AMOUNT,100) AS M_AMOUNT\n  --METADATA\n  , 'd749a898-8588-45dd-b961-f3cdae575aec' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  payout P\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_PAYOUT_STG"}, "model.dlh_stripe.V_STR_CUSTOMERS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH customer AS (\n  SELECT * FROM  {{source(var('source_schema', 'DEMO_STRIPE_NEW'), 'CUSTOMER')}}\n),\n\nrename AS \n(\nSELECT  \n  --DLHK\n  MD5(ID) AS K_CUSTOMER_DLHK\n  --Business keys\n  ,ID AS K_CUSTOMER_BK  \n  ,INVOICE_SETTINGS_DEFAULT_PAYMENT_METHOD AS K_DEFAULT_PAYMENT_METHOD_BK\n  --attributes\n  ,ADDRESS_CITY AS A_ADDRESS_CITY\n  ,ADDRESS_COUNTRY AS A_ADDRESS_COUNTRY\n  ,CREATED::TIMESTAMP AS A_CREATED_AT\n  ,CURRENCY AS A_CURRENCY\n  ,DEFAULT_SOURCE AS A_DEFAULT_SOURCE\n  ,DESCRIPTION AS A_DESCRIPTION\n  ,EMAIL AS A_EMAIL\n  ,INVOICE_PREFIX AS A_INVOICE_PREFIX\n  ,INVOICE_SETTINGS_CUSTOM_FIELDS AS A_INVOICE_SETTINGS_CUSTOM_FIELDS  \n  ,INVOICE_SETTINGS_FOOTER AS A_INVOICE_SETTINGS_FOOTER\n  ,NAME AS A_NAME\n  ,PHONE AS A_PHONE\n  ,PREFERRED_LOCALES AS A_PREFERRED_LOCALES\n  ,SHIPPING_ADDRESS_CITY AS A_SHIPPING_ADDRESS_CITY\n  ,SHIPPING_ADDRESS_COUNTRY AS A_SHIPPING_ADDRESS_COUNTRY\n  ,TAX_EXEMPT AS A_TAX_EXEMPT  \n  --BOOLEAN\n  ,DELINQUENT AS B_DELINQUENT\n  ,LIVEMODE AS B_LIVEMODE\n  --METRICS\n  ,BALANCE AS M_BALANCE\n  --METADATA\n  , '{{invocation_id}}' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  customer \n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_stripe.DEMO_STRIPE.CUSTOMER"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "staging", "CUSTOMER", "V_STR_CUSTOMERS_STG"], "unique_id": "model.dlh_stripe.V_STR_CUSTOMERS_STG", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "staging/CUSTOMER/V_STR_CUSTOMERS_STG.sql", "original_file_path": "models/staging/CUSTOMER/V_STR_CUSTOMERS_STG.sql", "name": "V_STR_CUSTOMERS_STG", "alias": "V_STR_CUSTOMERS_STG", "checksum": {"name": "sha256", "checksum": "346c8577999ef7f48fabf9445d46c1e1666e3f93bc951ff9c05acdffe7b12f06"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_STRIPE", "CUSTOMER"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/staging/CUSTOMER/V_STR_CUSTOMERS_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "view", "schema": "STRIPE", "tags": ["staging", "daily"]}, "created_at": 1654860406.1559522, "compiled_sql": "\n\nWITH customer AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DEMO_STRIPE.\"CUSTOMER\"\n),\n\nrename AS \n(\nSELECT  \n  --DLHK\n  MD5(ID) AS K_CUSTOMER_DLHK\n  --Business keys\n  ,ID AS K_CUSTOMER_BK  \n  ,INVOICE_SETTINGS_DEFAULT_PAYMENT_METHOD AS K_DEFAULT_PAYMENT_METHOD_BK\n  --attributes\n  ,ADDRESS_CITY AS A_ADDRESS_CITY\n  ,ADDRESS_COUNTRY AS A_ADDRESS_COUNTRY\n  ,CREATED::TIMESTAMP AS A_CREATED_AT\n  ,CURRENCY AS A_CURRENCY\n  ,DEFAULT_SOURCE AS A_DEFAULT_SOURCE\n  ,DESCRIPTION AS A_DESCRIPTION\n  ,EMAIL AS A_EMAIL\n  ,INVOICE_PREFIX AS A_INVOICE_PREFIX\n  ,INVOICE_SETTINGS_CUSTOM_FIELDS AS A_INVOICE_SETTINGS_CUSTOM_FIELDS  \n  ,INVOICE_SETTINGS_FOOTER AS A_INVOICE_SETTINGS_FOOTER\n  ,NAME AS A_NAME\n  ,PHONE AS A_PHONE\n  ,PREFERRED_LOCALES AS A_PREFERRED_LOCALES\n  ,SHIPPING_ADDRESS_CITY AS A_SHIPPING_ADDRESS_CITY\n  ,SHIPPING_ADDRESS_COUNTRY AS A_SHIPPING_ADDRESS_COUNTRY\n  ,TAX_EXEMPT AS A_TAX_EXEMPT  \n  --BOOLEAN\n  ,DELINQUENT AS B_DELINQUENT\n  ,LIVEMODE AS B_LIVEMODE\n  --METRICS\n  ,BALANCE AS M_BALANCE\n  --METADATA\n  , 'd749a898-8588-45dd-b961-f3cdae575aec' as MD_INTGR_ID\n  , CURRENT_TIMESTAMP() MD_ELT_UPDATED_DTS\nFROM \n  customer \n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_CUSTOMERS_STG"}, "model.dlh_stripe.W_STR_SUBSCRIPTION_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_STR_SUBSCRIPTION_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_stripe.V_STR_SUBSCRIPTION_STG"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "master", "W_STR_SUBSCRIPTION_F"], "unique_id": "model.dlh_stripe.W_STR_SUBSCRIPTION_F", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "master/W_STR_SUBSCRIPTION_F.sql", "original_file_path": "models/master/W_STR_SUBSCRIPTION_F.sql", "name": "W_STR_SUBSCRIPTION_F", "alias": "W_STR_SUBSCRIPTION_F", "checksum": {"name": "sha256", "checksum": "5ad58ab26bfd4ae2d4800595d5e9bef3a724130d8e099c0e80c8859030d2ee20"}, "tags": ["staging", "daily"], "refs": [["V_STR_SUBSCRIPTION_STG"]], "sources": [], "description": "This is the dates dimension table", "columns": {"K_SUBSCRIPTION_ITEM_DLHK": {"name": "K_SUBSCRIPTION_ITEM_DLHK", "description": "DateLakeHouse key of the subscription fact table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CUSTOMER_DLHK": {"name": "K_CUSTOMER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_PLAN_DLHK": {"name": "K_PLAN_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "A_ITEM_CREATED_DATE_AT": {"name": "A_ITEM_CREATED_DATE_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_stripe://models/schema.yml", "compiled_path": "target/compiled/dlh_stripe/models/master/W_STR_SUBSCRIPTION_F.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "table", "schema": "STRIPE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1654860406.192728, "compiled_sql": "\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_SUBSCRIPTION_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_SUBSCRIPTION_F"}, "model.dlh_stripe.W_STR_CREDIT_NOTES_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_STR_CREDIT_NOTES_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_stripe.V_STR_CREDIT_NOTES_STG"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "master", "W_STR_CREDIT_NOTES_F"], "unique_id": "model.dlh_stripe.W_STR_CREDIT_NOTES_F", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "master/W_STR_CREDIT_NOTES_F.sql", "original_file_path": "models/master/W_STR_CREDIT_NOTES_F.sql", "name": "W_STR_CREDIT_NOTES_F", "alias": "W_STR_CREDIT_NOTES_F", "checksum": {"name": "sha256", "checksum": "aae40f746254d958866d1f31892300ac105f7a1c3c77d4b19149c716761cec3e"}, "tags": ["staging", "daily"], "refs": [["V_STR_CREDIT_NOTES_STG"]], "sources": [], "description": "This is the credit notes fact table", "columns": {"K_CREDIT_NOTE_DLHK": {"name": "K_CREDIT_NOTE_DLHK", "description": "DataLakeHouse key of the credit note", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CUSTOMER_DLHK": {"name": "K_CUSTOMER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "A_CREATED_DATE_AT": {"name": "A_CREATED_DATE_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_stripe://models/schema.yml", "compiled_path": "target/compiled/dlh_stripe/models/master/W_STR_CREDIT_NOTES_F.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "table", "schema": "STRIPE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1654860406.190186, "compiled_sql": "\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_CREDIT_NOTES_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_CREDIT_NOTES_F"}, "model.dlh_stripe.W_STR_INVOICE_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_STR_INVOICES_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_stripe.V_STR_INVOICES_STG"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "master", "W_STR_INVOICE_F"], "unique_id": "model.dlh_stripe.W_STR_INVOICE_F", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "master/W_STR_INVOICE_F.sql", "original_file_path": "models/master/W_STR_INVOICE_F.sql", "name": "W_STR_INVOICE_F", "alias": "W_STR_INVOICE_F", "checksum": {"name": "sha256", "checksum": "589646555e27a87a73953187ddf527002412080ce74b18e8f0e296f8ef0e5f81"}, "tags": ["staging", "daily"], "refs": [["V_STR_INVOICES_STG"]], "sources": [], "description": "This is the invoices fact table", "columns": {"K_INVOICE_LINE_ITEM_DLHK": {"name": "K_INVOICE_LINE_ITEM_DLHK", "description": "DateLakeHouse key of the invoice fact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CUSTOMER_DLHK": {"name": "K_CUSTOMER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_PLAN_DLHK": {"name": "K_PLAN_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "A_INVOICE_CREATED_DATE_AT": {"name": "A_INVOICE_CREATED_DATE_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_stripe://models/schema.yml", "compiled_path": "target/compiled/dlh_stripe/models/master/W_STR_INVOICE_F.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "table", "schema": "STRIPE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1654860406.19102, "compiled_sql": "\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_INVOICES_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_INVOICE_F"}, "model.dlh_stripe.W_STR_CUSTOMER_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_STR_CUSTOMERS_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_stripe.V_STR_CUSTOMERS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "master", "W_STR_CUSTOMER_D"], "unique_id": "model.dlh_stripe.W_STR_CUSTOMER_D", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "master/W_STR_CUSTOMER_D.sql", "original_file_path": "models/master/W_STR_CUSTOMER_D.sql", "name": "W_STR_CUSTOMER_D", "alias": "W_STR_CUSTOMER_D", "checksum": {"name": "sha256", "checksum": "baf3d293583b8632732d4966c03cacd62668da9223952baf935ed11fc1d1a3fe"}, "tags": ["staging", "daily"], "refs": [["V_STR_CUSTOMERS_STG"]], "sources": [], "description": "This is the customers dimension table", "columns": {"K_CUSTOMER_DLHK": {"name": "K_CUSTOMER_DLHK", "description": "DataLakeHouse key of the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_stripe://models/schema.yml", "compiled_path": "target/compiled/dlh_stripe/models/master/W_STR_CUSTOMER_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "table", "schema": "STRIPE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1654860406.187362, "compiled_sql": "\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_CUSTOMERS_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_CUSTOMER_D"}, "model.dlh_stripe.W_STR_PAYMENT_METHOD_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_STR_PAYMENT_METHOD_STG')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_stripe.V_STR_PAYMENT_METHOD_STG"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "master", "W_STR_PAYMENT_METHOD_D"], "unique_id": "model.dlh_stripe.W_STR_PAYMENT_METHOD_D", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "master/W_STR_PAYMENT_METHOD_D.sql", "original_file_path": "models/master/W_STR_PAYMENT_METHOD_D.sql", "name": "W_STR_PAYMENT_METHOD_D", "alias": "W_STR_PAYMENT_METHOD_D", "checksum": {"name": "sha256", "checksum": "8a974655d4147fb3de1662d5f3886bb84479fb56d5b73fdbbfabf2f2f3cba75d"}, "tags": ["staging", "daily"], "refs": [["V_STR_PAYMENT_METHOD_STG"]], "sources": [], "description": "This is the payment method dimension table", "columns": {"K_PAYMENT_METHOD_DLHK": {"name": "K_PAYMENT_METHOD_DLHK", "description": "DateLakeHouse key of the payment method", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_stripe://models/schema.yml", "compiled_path": "target/compiled/dlh_stripe/models/master/W_STR_PAYMENT_METHOD_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "table", "schema": "STRIPE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1654860406.1882172, "compiled_sql": "\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_PAYMENT_METHOD_STG", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_PAYMENT_METHOD_D"}, "model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nWITH balance_transactions AS (\n  SELECT * FROM {{ref('V_STR_BALANCE_TRANSACTIONS_STG')}}\n),\ncharge as (\n  SELECT * FROM {{ref('V_STR_CHARGES_STG')}}\n),\npayment_intent as (\n  SELECT * FROM {{ref('V_STR_PAYMENT_INTENT_STG')}}\n),\npayout as (\n  SELECT * FROM {{ref('V_STR_PAYOUT_STG')}}\n),\nrefund as (\n  SELECT * FROM {{ref('V_STR_REFUND_STG')}}\n)\n\nSELECT \n    balance_transactions.K_BALANCE_TRANSACTION_DLHK\n    ,charge.K_CHARGE_DLHK\n    ,payment_intent.K_PAYMENT_INTENT_DLHK\n    ,charge.K_PAYMENT_METHOD_DLHK\n    ,payout.K_PAYOUT_DLHK\n    ,COALESCE(charge.K_CUSTOMER_DLHK,charge_refund.K_CUSTOMER_DLHK) AS K_CHARGE_CUSTOMER_DLHK\n    ,charge.K_PAYMENT_METHOD_BK\n    ,charge.K_CHARGE_BK\n    ,payment_intent.K_PAYMENT_INTENT_BK\n    ,payout.K_PAYOUT_BK\n    ,balance_transactions.K_BALANCE_TRANSACTION_BK\n    ,COALESCE(charge.K_CUSTOMER_BK,charge_refund.K_CUSTOMER_BK) AS K_CHARGE_CUSTOMER_BK\n    ,balance_transactions.A_CREATED_AT\n    ,balance_transactions.A_CREATED_AT::DATE AS A_CREATED_DATE_AT\n    ,balance_transactions.K_SOURCE_BK\n    ,balance_transactions.A_AVAILABLE_ON        \n    ,balance_transactions.A_DESCRIPTION\n    ,balance_transactions.A_REPORTING_CATEGORY\n    ,balance_transactions.A_STATUS\n    ,balance_transactions.A_TRANSACTION_TYPE\n    ,balance_transactions.A_CURRENCY\n    ,balance_transactions.M_AMOUNT\n    ,balance_transactions.M_EXCHANGE_RATE\n    ,balance_transactions.M_NET\n    ,CASE\n        WHEN balance_transactions.A_TRANSACTION_TYPE in ('charge', 'payment') then 'charge'\n        WHEN balance_transactions.A_TRANSACTION_TYPE in ('refund', 'payment_refund') then 'refund'\n        WHEN balance_transactions.A_TRANSACTION_TYPE in ('payout_cancel', 'payout_failure') then 'payout_reversal'\n        WHEN balance_transactions.A_TRANSACTION_TYPE in ('transfer', 'recipient_transfer') then 'transfer'\n        WHEN balance_transactions.A_TRANSACTION_TYPE in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n        ELSE balance_transactions.A_TRANSACTION_TYPE\n    END as A_REPORTING_TRANSACTION_CATEGORY    \n    ,charge.A_RECEIPT_EMAIL    \n    ,charge.A_CREATED_AT as A_CHARGE_CREATED_AT    \n    ,charge.A_CREATED_DATE_AT as A_CHARGE_CREATED_DATE_AT    \n    ,payout.A_ARRIVAL_DATE as A_PAYOUT_EXPECTED_ARRIVAL_DATE\n    ,payout.A_STATUS as A_PAYOUT_STATUS\n    ,payout.A_TYPE as A_PAYOUT_TYPE\n    ,payout.A_DESCRIPTION as A_PAYOUT_DESCRIPTION\n    ,refund.A_CREATED_AT as A_REFUND_CREATED_AT\n    ,refund.A_CREATED_AT::DATE as A_REFUND_CREATED_DATE_AT\n    ,refund.A_STATUS as A_REFUND_STATUS\n    ,refund.A_REASON as A_REFUND_REASON\nFROM balance_transactions\n\nleft join charge on charge.K_BALANCE_TRANSACTION_DLHK = balance_transactions.K_BALANCE_TRANSACTION_DLHK\nleft join payment_intent on payment_intent.K_PAYMENT_INTENT_DLHK = charge.K_PAYMENT_INTENT_DLHK\nleft join payout on payout.K_BALANCE_TRANSACTION_DLHK = balance_transactions.K_BALANCE_TRANSACTION_DLHK\nleft join refund on refund.K_BALANCE_TRANSACTION_DLHK = balance_transactions.K_BALANCE_TRANSACTION_DLHK\nleft join charge as charge_refund on charge_refund.K_CHARGE_DLHK = refund.K_CHARGE_DLHK", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_stripe.V_STR_BALANCE_TRANSACTIONS_STG", "model.dlh_stripe.V_STR_CHARGES_STG", "model.dlh_stripe.V_STR_PAYMENT_INTENT_STG", "model.dlh_stripe.V_STR_PAYOUT_STG", "model.dlh_stripe.V_STR_REFUND_STG"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "master", "W_STR_BALANCE_TRANSACTION_F"], "unique_id": "model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "master/W_STR_BALANCE_TRANSACTION_F.sql", "original_file_path": "models/master/W_STR_BALANCE_TRANSACTION_F.sql", "name": "W_STR_BALANCE_TRANSACTION_F", "alias": "W_STR_BALANCE_TRANSACTION_F", "checksum": {"name": "sha256", "checksum": "54dde2bc6249816ecb5329866ecb52c4de043bce0cc92f9b4fae579ba3ed69fa"}, "tags": ["staging", "daily"], "refs": [["V_STR_BALANCE_TRANSACTIONS_STG"], ["V_STR_CHARGES_STG"], ["V_STR_PAYMENT_INTENT_STG"], ["V_STR_PAYOUT_STG"], ["V_STR_REFUND_STG"]], "sources": [], "description": "This is the balance transactions fact table", "columns": {"K_BALANCE_TRANSACTION_DLHK": {"name": "K_BALANCE_TRANSACTION_DLHK", "description": "DataLakeHouse key of the balance transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_STR_PAYMENT_METHOD_DLHK": {"name": "K_STR_PAYMENT_METHOD_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CHARGE_CUSTOMER_DLHK": {"name": "K_CHARGE_CUSTOMER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "A_CREATED_DATE_AT": {"name": "A_CREATED_DATE_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_stripe://models/schema.yml", "compiled_path": "target/compiled/dlh_stripe/models/master/W_STR_BALANCE_TRANSACTION_F.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "table", "schema": "STRIPE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1654860406.1895108, "compiled_sql": "\n\n\nWITH balance_transactions AS (\n  SELECT * FROM DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_BALANCE_TRANSACTIONS_STG\n),\ncharge as (\n  SELECT * FROM DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_CHARGES_STG\n),\npayment_intent as (\n  SELECT * FROM DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_PAYMENT_INTENT_STG\n),\npayout as (\n  SELECT * FROM DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_PAYOUT_STG\n),\nrefund as (\n  SELECT * FROM DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_REFUND_STG\n)\n\nSELECT \n    balance_transactions.K_BALANCE_TRANSACTION_DLHK\n    ,charge.K_CHARGE_DLHK\n    ,payment_intent.K_PAYMENT_INTENT_DLHK\n    ,charge.K_PAYMENT_METHOD_DLHK\n    ,payout.K_PAYOUT_DLHK\n    ,COALESCE(charge.K_CUSTOMER_DLHK,charge_refund.K_CUSTOMER_DLHK) AS K_CHARGE_CUSTOMER_DLHK\n    ,charge.K_PAYMENT_METHOD_BK\n    ,charge.K_CHARGE_BK\n    ,payment_intent.K_PAYMENT_INTENT_BK\n    ,payout.K_PAYOUT_BK\n    ,balance_transactions.K_BALANCE_TRANSACTION_BK\n    ,COALESCE(charge.K_CUSTOMER_BK,charge_refund.K_CUSTOMER_BK) AS K_CHARGE_CUSTOMER_BK\n    ,balance_transactions.A_CREATED_AT\n    ,balance_transactions.A_CREATED_AT::DATE AS A_CREATED_DATE_AT\n    ,balance_transactions.K_SOURCE_BK\n    ,balance_transactions.A_AVAILABLE_ON        \n    ,balance_transactions.A_DESCRIPTION\n    ,balance_transactions.A_REPORTING_CATEGORY\n    ,balance_transactions.A_STATUS\n    ,balance_transactions.A_TRANSACTION_TYPE\n    ,balance_transactions.A_CURRENCY\n    ,balance_transactions.M_AMOUNT\n    ,balance_transactions.M_EXCHANGE_RATE\n    ,balance_transactions.M_NET\n    ,CASE\n        WHEN balance_transactions.A_TRANSACTION_TYPE in ('charge', 'payment') then 'charge'\n        WHEN balance_transactions.A_TRANSACTION_TYPE in ('refund', 'payment_refund') then 'refund'\n        WHEN balance_transactions.A_TRANSACTION_TYPE in ('payout_cancel', 'payout_failure') then 'payout_reversal'\n        WHEN balance_transactions.A_TRANSACTION_TYPE in ('transfer', 'recipient_transfer') then 'transfer'\n        WHEN balance_transactions.A_TRANSACTION_TYPE in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n        ELSE balance_transactions.A_TRANSACTION_TYPE\n    END as A_REPORTING_TRANSACTION_CATEGORY    \n    ,charge.A_RECEIPT_EMAIL    \n    ,charge.A_CREATED_AT as A_CHARGE_CREATED_AT    \n    ,charge.A_CREATED_DATE_AT as A_CHARGE_CREATED_DATE_AT    \n    ,payout.A_ARRIVAL_DATE as A_PAYOUT_EXPECTED_ARRIVAL_DATE\n    ,payout.A_STATUS as A_PAYOUT_STATUS\n    ,payout.A_TYPE as A_PAYOUT_TYPE\n    ,payout.A_DESCRIPTION as A_PAYOUT_DESCRIPTION\n    ,refund.A_CREATED_AT as A_REFUND_CREATED_AT\n    ,refund.A_CREATED_AT::DATE as A_REFUND_CREATED_DATE_AT\n    ,refund.A_STATUS as A_REFUND_STATUS\n    ,refund.A_REASON as A_REFUND_REASON\nFROM balance_transactions\n\nleft join charge on charge.K_BALANCE_TRANSACTION_DLHK = balance_transactions.K_BALANCE_TRANSACTION_DLHK\nleft join payment_intent on payment_intent.K_PAYMENT_INTENT_DLHK = charge.K_PAYMENT_INTENT_DLHK\nleft join payout on payout.K_BALANCE_TRANSACTION_DLHK = balance_transactions.K_BALANCE_TRANSACTION_DLHK\nleft join refund on refund.K_BALANCE_TRANSACTION_DLHK = balance_transactions.K_BALANCE_TRANSACTION_DLHK\nleft join charge as charge_refund on charge_refund.K_CHARGE_DLHK = refund.K_CHARGE_DLHK", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_BALANCE_TRANSACTION_F"}, "model.dlh_stripe.W_STR_DATE_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT \n\tCAST(DATE_KEY AS NUMBER(9)) AS K_DATE_INTEGER_BK\n\t,CAST(DATE_COLUMN AS DATE) AS K_DATE_BK\n\t,CAST(FULL_DATE_DESC AS VARCHAR(64)) AS A_FULL_DATE_DESC\n\t,CAST(DAY_NUM_IN_WEEK AS NUMBER(1)) AS A_DAY_NUM_IN_WEEK\n\t,CAST(DAY_NUM_IN_MONTH AS NUMBER(2)) AS A_DAY_NUM_IN_MONTH\n\t,CAST(DAY_NUM_IN_YEAR AS NUMBER(3)) AS A_DAY_NUM_IN_YEAR\n\t,CAST(DAY_NAME AS VARCHAR(10)) AS A_DAY_NAME\n\t,CAST(DAY_ABBREV AS VARCHAR(3)) AS A_DAY_ABBREV\n\t,CAST(WEEKDAY_IND AS VARCHAR(64)) AS A_WEEKDAY_IND\n\t,CAST(US_HOLIDAY_IND AS VARCHAR(64)) AS A_US_HOLIDAY_IND\n\t,CAST(COMPANY_HOLIDAY_IND AS VARCHAR(64)) AS A_COMPANY_HOLIDAY_IND\n\t,CAST(MONTH_END_IND AS VARCHAR(64)) AS A_MONTH_END_IND\n\t,CAST(WEEK_BEGIN_DATE_NKEY AS NUMBER(9)) AS A_WEEK_BEGIN_DATE_NKEY\n\t,CAST(WEEK_BEGIN_DATE AS DATE) AS A_WEEK_BEGIN_DATE\n\t,CAST(WEEK_END_DATE_NKEY AS NUMBER(9)) AS A_WEEK_END_DATE_NKEY\n\t,CAST(WEEK_END_DATE AS DATE) AS A_WEEK_END_DATE\n\t,CAST(WEEK_NUM_IN_YEAR AS NUMBER(9)) AS A_WEEK_NUM_IN_YEAR\n\t,CAST(MONTH_NAME AS VARCHAR(10)) AS A_MONTH_NAME\n\t,CAST(MONTH_ABBREV AS VARCHAR(3)) AS A_MONTH_ABBREV\n\t,CAST(MONTH_NUM_IN_YEAR AS NUMBER(2)) AS A_MONTH_NUM_IN_YEAR\n\t,CAST(YEARMONTH AS VARCHAR(10)) AS A_YEARMONTH\n\t,CAST(CURRENT_QUARTER AS NUMBER(1)) AS A_QUARTER\n\t,CAST(YEARQUARTER AS VARCHAR(10)) AS A_YEARQUARTER\n\t,CAST(CURRENT_YEAR AS NUMBER(5)) AS A_YEAR\n\t,CAST(FISCAL_WEEK_NUM AS NUMBER(2)) AS A_FISCAL_WEEK_NUM\n\t,CAST(FISCAL_MONTH_NUM AS NUMBER(2)) AS A_FISCAL_MONTH_NUM\n\t,CAST(FISCAL_YEARMONTH AS VARCHAR(10)) AS A_FISCAL_YEARMONTH\n\t,CAST(FISCAL_QUARTER AS NUMBER(1)) AS A_FISCAL_QUARTER\n\t,CAST(FISCAL_YEARQUARTER AS VARCHAR(10)) AS A_FISCAL_YEARQUARTER\n\t,CAST(FISCAL_HALFYEAR AS NUMBER(1)) AS A_FISCAL_HALFYEAR\n\t,CAST(FISCAL_YEAR AS NUMBER(5)) AS A_FISCAL_YEAR\n\t,CAST(SQL_TIMESTAMP AS TIMESTAMP_NTZ) AS A_SQL_TIMESTAMP_DTS\n\t,CAST(CURRENT_ROW_IND AS CHAR(1)) AS A_CURRENT_ROW_IND\n\t,CAST(EFFECTIVE_DATE AS DATE) AS A_EFFECTIVE_DATE\n\t,CAST(EXPIRA_DATE AS DATE) AS A_EXPIRATION_DATE\nFROM\n  {{ref('V_STR_DATE_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_stripe.V_STR_DATE_STG"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "master", "W_STR_DATE_D"], "unique_id": "model.dlh_stripe.W_STR_DATE_D", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "master/W_STR_DATE_D.sql", "original_file_path": "models/master/W_STR_DATE_D.sql", "name": "W_STR_DATE_D", "alias": "W_STR_DATE_D", "checksum": {"name": "sha256", "checksum": "71f24bcd3cf54002395b0f0b0f8cc12bd36d323a303f42aa36152676360b7515"}, "tags": ["staging", "daily"], "refs": [["V_STR_DATE_STG"]], "sources": [], "description": "This is the dates dimension table", "columns": {"K_DATE_INTEGER_BK": {"name": "K_DATE_INTEGER_BK", "description": "Date Key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_stripe://models/schema.yml", "compiled_path": "target/compiled/dlh_stripe/models/master/W_STR_DATE_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "table", "schema": "STRIPE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1654860406.1878211, "compiled_sql": "\n\nSELECT \n\tCAST(DATE_KEY AS NUMBER(9)) AS K_DATE_INTEGER_BK\n\t,CAST(DATE_COLUMN AS DATE) AS K_DATE_BK\n\t,CAST(FULL_DATE_DESC AS VARCHAR(64)) AS A_FULL_DATE_DESC\n\t,CAST(DAY_NUM_IN_WEEK AS NUMBER(1)) AS A_DAY_NUM_IN_WEEK\n\t,CAST(DAY_NUM_IN_MONTH AS NUMBER(2)) AS A_DAY_NUM_IN_MONTH\n\t,CAST(DAY_NUM_IN_YEAR AS NUMBER(3)) AS A_DAY_NUM_IN_YEAR\n\t,CAST(DAY_NAME AS VARCHAR(10)) AS A_DAY_NAME\n\t,CAST(DAY_ABBREV AS VARCHAR(3)) AS A_DAY_ABBREV\n\t,CAST(WEEKDAY_IND AS VARCHAR(64)) AS A_WEEKDAY_IND\n\t,CAST(US_HOLIDAY_IND AS VARCHAR(64)) AS A_US_HOLIDAY_IND\n\t,CAST(COMPANY_HOLIDAY_IND AS VARCHAR(64)) AS A_COMPANY_HOLIDAY_IND\n\t,CAST(MONTH_END_IND AS VARCHAR(64)) AS A_MONTH_END_IND\n\t,CAST(WEEK_BEGIN_DATE_NKEY AS NUMBER(9)) AS A_WEEK_BEGIN_DATE_NKEY\n\t,CAST(WEEK_BEGIN_DATE AS DATE) AS A_WEEK_BEGIN_DATE\n\t,CAST(WEEK_END_DATE_NKEY AS NUMBER(9)) AS A_WEEK_END_DATE_NKEY\n\t,CAST(WEEK_END_DATE AS DATE) AS A_WEEK_END_DATE\n\t,CAST(WEEK_NUM_IN_YEAR AS NUMBER(9)) AS A_WEEK_NUM_IN_YEAR\n\t,CAST(MONTH_NAME AS VARCHAR(10)) AS A_MONTH_NAME\n\t,CAST(MONTH_ABBREV AS VARCHAR(3)) AS A_MONTH_ABBREV\n\t,CAST(MONTH_NUM_IN_YEAR AS NUMBER(2)) AS A_MONTH_NUM_IN_YEAR\n\t,CAST(YEARMONTH AS VARCHAR(10)) AS A_YEARMONTH\n\t,CAST(CURRENT_QUARTER AS NUMBER(1)) AS A_QUARTER\n\t,CAST(YEARQUARTER AS VARCHAR(10)) AS A_YEARQUARTER\n\t,CAST(CURRENT_YEAR AS NUMBER(5)) AS A_YEAR\n\t,CAST(FISCAL_WEEK_NUM AS NUMBER(2)) AS A_FISCAL_WEEK_NUM\n\t,CAST(FISCAL_MONTH_NUM AS NUMBER(2)) AS A_FISCAL_MONTH_NUM\n\t,CAST(FISCAL_YEARMONTH AS VARCHAR(10)) AS A_FISCAL_YEARMONTH\n\t,CAST(FISCAL_QUARTER AS NUMBER(1)) AS A_FISCAL_QUARTER\n\t,CAST(FISCAL_YEARQUARTER AS VARCHAR(10)) AS A_FISCAL_YEARQUARTER\n\t,CAST(FISCAL_HALFYEAR AS NUMBER(1)) AS A_FISCAL_HALFYEAR\n\t,CAST(FISCAL_YEAR AS NUMBER(5)) AS A_FISCAL_YEAR\n\t,CAST(SQL_TIMESTAMP AS TIMESTAMP_NTZ) AS A_SQL_TIMESTAMP_DTS\n\t,CAST(CURRENT_ROW_IND AS CHAR(1)) AS A_CURRENT_ROW_IND\n\t,CAST(EFFECTIVE_DATE AS DATE) AS A_EFFECTIVE_DATE\n\t,CAST(EXPIRA_DATE AS DATE) AS A_EXPIRATION_DATE\nFROM\n  DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_DATE_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_DATE_D"}, "model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nselect \n  MD5(CONCAT(COALESCE(subs.K_CUSTOMER_DLHK,'00000'),'-',COALESCE(subs.K_PLAN_DLHK,'00000'),date_cross.K_DATE_BK)) K_SUBSCRIPTION_BY_PLAN_DLHK,\n  subs.K_CUSTOMER_DLHK,\n  subs.K_PLAN_DLHK,\n  'day' as A_INTERVAL,\n   date_cross.K_DATE_BK A_DATE_REF,\n  count(case when (subs.A_CURRENT_PERIOD_END::DATE is NULL or subs.A_CURRENT_PERIOD_END::DATE >= DATEADD(day,1, date_cross.K_DATE_BK)) and subs.A_CURRENT_PERIOD_START::DATE < dateadd(day, 1, date_cross.K_DATE_BK) then subs.K_SUBSCRIPTION_DLHK end) M_TOTAL_SUBSCRIPTIONS  \nFROM {{ref('W_STR_SUBSCRIPTION_F') }} subs\n CROSS JOIN\n {{ref('W_STR_DATE_D')}} date_cross\n where date_cross.K_DATE_BK >= DATEADD(DAY, -1, A_CURRENT_PERIOD_START::DATE) AND date_cross.K_DATE_BK <= DATEADD(DAY, 1, COALESCE(A_CURRENT_PERIOD_END::DATE,CURRENT_DATE))\ngroup by subs.K_CUSTOMER_DLHK,date_cross.K_DATE_BK,subs.K_PLAN_DLHK\n\nUNION ALL\n\nselect \n  MD5(CONCAT(COALESCE(subs.K_CUSTOMER_DLHK,'00000'),'-',COALESCE(subs.K_PLAN_DLHK,'00000'),date_cross.K_DATE_BK)) K_SUBSCRIPTION_BY_PLAN_DLHK,\n  subs.K_CUSTOMER_DLHK,\n  subs.K_PLAN_DLHK,\n  'week' as A_INTERVAL,\n   date_cross.K_DATE_BK A_DATE_REF,\n  count(case when (subs.A_CURRENT_PERIOD_END::DATE is NULL or subs.A_CURRENT_PERIOD_END::DATE >= last_day(date_cross.K_DATE_BK,'week')) and subs.A_CURRENT_PERIOD_START::DATE < dateadd(week, 1, date_cross.K_DATE_BK) then subs.K_SUBSCRIPTION_DLHK end) M_TOTAL_SUBSCRIPTIONS  \nFROM {{ref('W_STR_SUBSCRIPTION_F') }} subs\n CROSS JOIN\n{{ref('W_STR_DATE_D')}} date_cross\n where date_cross.K_DATE_BK >= DATEADD(DAY, -6, DATE_TRUNC('WEEK',A_CURRENT_PERIOD_START::DATE)) AND date_cross.K_DATE_BK <= DATEADD(WEEK, 1, COALESCE(A_CURRENT_PERIOD_END::DATE,CURRENT_DATE))\n AND date_cross.A_DAY_NUM_IN_WEEK = 1\ngroup by subs.K_CUSTOMER_DLHK,date_cross.K_DATE_BK,subs.K_PLAN_DLHK\n\nUNION ALL\n\nselect \n  MD5(CONCAT(COALESCE(subs.K_CUSTOMER_DLHK,'00000'),'-',COALESCE(subs.K_PLAN_DLHK,'00000'),date_cross.K_DATE_BK)) K_SUBSCRIPTION_BY_PLAN_DLHK,\n  subs.K_CUSTOMER_DLHK,\n  subs.K_PLAN_DLHK,\n  'month' as A_INTERVAL,\n   date_cross.K_DATE_BK A_DATE_REF,\n  count(case when (subs.A_CURRENT_PERIOD_END::DATE is NULL or subs.A_CURRENT_PERIOD_END::DATE >= last_day(date_cross.K_DATE_BK,'month')) and subs.A_CURRENT_PERIOD_START::DATE < dateadd(month, 1, date_cross.K_DATE_BK) then subs.K_SUBSCRIPTION_DLHK end) M_TOTAL_SUBSCRIPTIONS  \nFROM {{ref('W_STR_SUBSCRIPTION_F') }} subs\n CROSS JOIN\n{{ref('W_STR_DATE_D')}} date_cross\n where date_cross.K_DATE_BK >= DATEADD(MONTH, -1, DATE_TRUNC('MONTH',A_CURRENT_PERIOD_START::DATE)) AND date_cross.K_DATE_BK <= DATEADD(MONTH, 1, COALESCE(A_CURRENT_PERIOD_END::DATE,CURRENT_DATE))\nAND date_cross.K_DATE_BK =  last_day(date_cross.K_DATE_BK,'month') \ngroup by subs.K_CUSTOMER_DLHK,date_cross.K_DATE_BK,subs.K_PLAN_DLHK", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_stripe.W_STR_SUBSCRIPTION_F", "model.dlh_stripe.W_STR_DATE_D", "model.dlh_stripe.W_STR_SUBSCRIPTION_F", "model.dlh_stripe.W_STR_DATE_D", "model.dlh_stripe.W_STR_SUBSCRIPTION_F", "model.dlh_stripe.W_STR_DATE_D"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "master", "W_STR_SUBSCRIPTION_BY_PLAN_F"], "unique_id": "model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "master/W_STR_SUBSCRIPTION_BY_PLAN_F.sql", "original_file_path": "models/master/W_STR_SUBSCRIPTION_BY_PLAN_F.sql", "name": "W_STR_SUBSCRIPTION_BY_PLAN_F", "alias": "W_STR_SUBSCRIPTION_BY_PLAN_F", "checksum": {"name": "sha256", "checksum": "27c565df6b557e5d8d2fee55da16777633cf6dbd284078188ab870bd2a89c180"}, "tags": ["staging", "daily"], "refs": [["W_STR_SUBSCRIPTION_F"], ["W_STR_DATE_D"], ["W_STR_SUBSCRIPTION_F"], ["W_STR_DATE_D"], ["W_STR_SUBSCRIPTION_F"], ["W_STR_DATE_D"]], "sources": [], "description": "This is the subscription by plan  fact table", "columns": {"K_SUBSCRIPTION_BY_PLAN_DLHK": {"name": "K_SUBSCRIPTION_BY_PLAN_DLHK", "description": "DateLakeHouse key of the subscription by plan fact table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CUSTOMER_DLHK": {"name": "K_CUSTOMER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_PLAN_DLHK": {"name": "K_PLAN_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "A_DATE_REF": {"name": "A_DATE_REF", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_stripe://models/schema.yml", "compiled_path": "target/compiled/dlh_stripe/models/master/W_STR_SUBSCRIPTION_BY_PLAN_F.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "table", "schema": "STRIPE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1654860406.191911, "compiled_sql": "\n\nselect \n  MD5(CONCAT(COALESCE(subs.K_CUSTOMER_DLHK,'00000'),'-',COALESCE(subs.K_PLAN_DLHK,'00000'),date_cross.K_DATE_BK)) K_SUBSCRIPTION_BY_PLAN_DLHK,\n  subs.K_CUSTOMER_DLHK,\n  subs.K_PLAN_DLHK,\n  'day' as A_INTERVAL,\n   date_cross.K_DATE_BK A_DATE_REF,\n  count(case when (subs.A_CURRENT_PERIOD_END::DATE is NULL or subs.A_CURRENT_PERIOD_END::DATE >= DATEADD(day,1, date_cross.K_DATE_BK)) and subs.A_CURRENT_PERIOD_START::DATE < dateadd(day, 1, date_cross.K_DATE_BK) then subs.K_SUBSCRIPTION_DLHK end) M_TOTAL_SUBSCRIPTIONS  \nFROM DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_SUBSCRIPTION_F subs\n CROSS JOIN\n DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_DATE_D date_cross\n where date_cross.K_DATE_BK >= DATEADD(DAY, -1, A_CURRENT_PERIOD_START::DATE) AND date_cross.K_DATE_BK <= DATEADD(DAY, 1, COALESCE(A_CURRENT_PERIOD_END::DATE,CURRENT_DATE))\ngroup by subs.K_CUSTOMER_DLHK,date_cross.K_DATE_BK,subs.K_PLAN_DLHK\n\nUNION ALL\n\nselect \n  MD5(CONCAT(COALESCE(subs.K_CUSTOMER_DLHK,'00000'),'-',COALESCE(subs.K_PLAN_DLHK,'00000'),date_cross.K_DATE_BK)) K_SUBSCRIPTION_BY_PLAN_DLHK,\n  subs.K_CUSTOMER_DLHK,\n  subs.K_PLAN_DLHK,\n  'week' as A_INTERVAL,\n   date_cross.K_DATE_BK A_DATE_REF,\n  count(case when (subs.A_CURRENT_PERIOD_END::DATE is NULL or subs.A_CURRENT_PERIOD_END::DATE >= last_day(date_cross.K_DATE_BK,'week')) and subs.A_CURRENT_PERIOD_START::DATE < dateadd(week, 1, date_cross.K_DATE_BK) then subs.K_SUBSCRIPTION_DLHK end) M_TOTAL_SUBSCRIPTIONS  \nFROM DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_SUBSCRIPTION_F subs\n CROSS JOIN\nDEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_DATE_D date_cross\n where date_cross.K_DATE_BK >= DATEADD(DAY, -6, DATE_TRUNC('WEEK',A_CURRENT_PERIOD_START::DATE)) AND date_cross.K_DATE_BK <= DATEADD(WEEK, 1, COALESCE(A_CURRENT_PERIOD_END::DATE,CURRENT_DATE))\n AND date_cross.A_DAY_NUM_IN_WEEK = 1\ngroup by subs.K_CUSTOMER_DLHK,date_cross.K_DATE_BK,subs.K_PLAN_DLHK\n\nUNION ALL\n\nselect \n  MD5(CONCAT(COALESCE(subs.K_CUSTOMER_DLHK,'00000'),'-',COALESCE(subs.K_PLAN_DLHK,'00000'),date_cross.K_DATE_BK)) K_SUBSCRIPTION_BY_PLAN_DLHK,\n  subs.K_CUSTOMER_DLHK,\n  subs.K_PLAN_DLHK,\n  'month' as A_INTERVAL,\n   date_cross.K_DATE_BK A_DATE_REF,\n  count(case when (subs.A_CURRENT_PERIOD_END::DATE is NULL or subs.A_CURRENT_PERIOD_END::DATE >= last_day(date_cross.K_DATE_BK,'month')) and subs.A_CURRENT_PERIOD_START::DATE < dateadd(month, 1, date_cross.K_DATE_BK) then subs.K_SUBSCRIPTION_DLHK end) M_TOTAL_SUBSCRIPTIONS  \nFROM DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_SUBSCRIPTION_F subs\n CROSS JOIN\nDEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_DATE_D date_cross\n where date_cross.K_DATE_BK >= DATEADD(MONTH, -1, DATE_TRUNC('MONTH',A_CURRENT_PERIOD_START::DATE)) AND date_cross.K_DATE_BK <= DATEADD(MONTH, 1, COALESCE(A_CURRENT_PERIOD_END::DATE,CURRENT_DATE))\nAND date_cross.K_DATE_BK =  last_day(date_cross.K_DATE_BK,'month') \ngroup by subs.K_CUSTOMER_DLHK,date_cross.K_DATE_BK,subs.K_PLAN_DLHK", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_SUBSCRIPTION_BY_PLAN_F"}, "model.dlh_stripe.W_STR_PLAN_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_STR_PLAN_STG')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_stripe.V_STR_PLAN_STG"]}, "config": {"enabled": true, "alias": null, "schema": "STRIPE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_stripe": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_STRIPE", "fqn": ["dlh_stripe", "master", "W_STR_PLAN_D"], "unique_id": "model.dlh_stripe.W_STR_PLAN_D", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "master/W_STR_PLAN_D.sql", "original_file_path": "models/master/W_STR_PLAN_D.sql", "name": "W_STR_PLAN_D", "alias": "W_STR_PLAN_D", "checksum": {"name": "sha256", "checksum": "c19d6825b7c68c3c9c31b7c1e8802801d0056610d11b734ea3bf07ca765d76ff"}, "tags": ["staging", "daily"], "refs": [["V_STR_PLAN_STG"]], "sources": [], "description": "This is the plan dimension table", "columns": {"K_PLAN_DLHK": {"name": "K_PLAN_DLHK", "description": "DateLakeHouse key of the plan", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_stripe://models/schema.yml", "compiled_path": "target/compiled/dlh_stripe/models/master/W_STR_PLAN_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_stripe": null, "materialized": "table", "schema": "STRIPE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1654860406.1885922, "compiled_sql": "\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.V_STR_PLAN_STG", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_PLAN_D"}, "test.dlh_stripe.unique_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK.f605ac9ade": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_CUSTOMER_DLHK", "model": "{{ get_where_subquery(ref('W_STR_CUSTOMER_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_CUSTOMER_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "unique_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK"], "unique_id": "test.dlh_stripe.unique_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK.f605ac9ade", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "unique_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK", "alias": "unique_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_CUSTOMER_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/unique_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.196693, "compiled_sql": "\n    \n    \n\nselect\n    K_CUSTOMER_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_CUSTOMER_D\nwhere K_CUSTOMER_DLHK is not null\ngroup by K_CUSTOMER_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CUSTOMER_DLHK", "file_key_name": "models.W_STR_CUSTOMER_D"}, "test.dlh_stripe.not_null_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK.1c417e987d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_CUSTOMER_DLHK", "model": "{{ get_where_subquery(ref('W_STR_CUSTOMER_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_CUSTOMER_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "not_null_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK"], "unique_id": "test.dlh_stripe.not_null_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK.1c417e987d", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "not_null_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK", "alias": "not_null_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_CUSTOMER_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/not_null_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.197595, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_CUSTOMER_D\nwhere K_CUSTOMER_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CUSTOMER_DLHK", "file_key_name": "models.W_STR_CUSTOMER_D"}, "test.dlh_stripe.unique_W_STR_DATE_D_K_DATE_INTEGER_BK.a508cb2e42": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_DATE_INTEGER_BK", "model": "{{ get_where_subquery(ref('W_STR_DATE_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_DATE_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "unique_W_STR_DATE_D_K_DATE_INTEGER_BK"], "unique_id": "test.dlh_stripe.unique_W_STR_DATE_D_K_DATE_INTEGER_BK.a508cb2e42", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "unique_W_STR_DATE_D_K_DATE_INTEGER_BK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_STR_DATE_D_K_DATE_INTEGER_BK", "alias": "unique_W_STR_DATE_D_K_DATE_INTEGER_BK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_DATE_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/unique_W_STR_DATE_D_K_DATE_INTEGER_BK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.1983922, "compiled_sql": "\n    \n    \n\nselect\n    K_DATE_INTEGER_BK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_DATE_D\nwhere K_DATE_INTEGER_BK is not null\ngroup by K_DATE_INTEGER_BK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_DATE_INTEGER_BK", "file_key_name": "models.W_STR_DATE_D"}, "test.dlh_stripe.not_null_W_STR_DATE_D_K_DATE_INTEGER_BK.421e48be45": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_DATE_INTEGER_BK", "model": "{{ get_where_subquery(ref('W_STR_DATE_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_DATE_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "not_null_W_STR_DATE_D_K_DATE_INTEGER_BK"], "unique_id": "test.dlh_stripe.not_null_W_STR_DATE_D_K_DATE_INTEGER_BK.421e48be45", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "not_null_W_STR_DATE_D_K_DATE_INTEGER_BK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_STR_DATE_D_K_DATE_INTEGER_BK", "alias": "not_null_W_STR_DATE_D_K_DATE_INTEGER_BK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_DATE_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/not_null_W_STR_DATE_D_K_DATE_INTEGER_BK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.199278, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_DATE_D\nwhere K_DATE_INTEGER_BK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_DATE_INTEGER_BK", "file_key_name": "models.W_STR_DATE_D"}, "test.dlh_stripe.unique_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK.116a474054": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_PAYMENT_METHOD_DLHK", "model": "{{ get_where_subquery(ref('W_STR_PAYMENT_METHOD_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_PAYMENT_METHOD_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "unique_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK"], "unique_id": "test.dlh_stripe.unique_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK.116a474054", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "unique_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK", "alias": "unique_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_PAYMENT_METHOD_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/unique_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.200044, "compiled_sql": "\n    \n    \n\nselect\n    K_PAYMENT_METHOD_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_PAYMENT_METHOD_D\nwhere K_PAYMENT_METHOD_DLHK is not null\ngroup by K_PAYMENT_METHOD_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PAYMENT_METHOD_DLHK", "file_key_name": "models.W_STR_PAYMENT_METHOD_D"}, "test.dlh_stripe.not_null_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK.ac6f63c478": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_PAYMENT_METHOD_DLHK", "model": "{{ get_where_subquery(ref('W_STR_PAYMENT_METHOD_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_PAYMENT_METHOD_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "not_null_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK"], "unique_id": "test.dlh_stripe.not_null_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK.ac6f63c478", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "not_null_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK", "alias": "not_null_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_PAYMENT_METHOD_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/not_null_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.200809, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_PAYMENT_METHOD_D\nwhere K_PAYMENT_METHOD_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PAYMENT_METHOD_DLHK", "file_key_name": "models.W_STR_PAYMENT_METHOD_D"}, "test.dlh_stripe.unique_W_STR_PLAN_D_K_PLAN_DLHK.ca05c789c2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_PLAN_DLHK", "model": "{{ get_where_subquery(ref('W_STR_PLAN_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_PLAN_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "unique_W_STR_PLAN_D_K_PLAN_DLHK"], "unique_id": "test.dlh_stripe.unique_W_STR_PLAN_D_K_PLAN_DLHK.ca05c789c2", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "unique_W_STR_PLAN_D_K_PLAN_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_STR_PLAN_D_K_PLAN_DLHK", "alias": "unique_W_STR_PLAN_D_K_PLAN_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_PLAN_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/unique_W_STR_PLAN_D_K_PLAN_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.201566, "compiled_sql": "\n    \n    \n\nselect\n    K_PLAN_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_PLAN_D\nwhere K_PLAN_DLHK is not null\ngroup by K_PLAN_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PLAN_DLHK", "file_key_name": "models.W_STR_PLAN_D"}, "test.dlh_stripe.not_null_W_STR_PLAN_D_K_PLAN_DLHK.569c376e05": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_PLAN_DLHK", "model": "{{ get_where_subquery(ref('W_STR_PLAN_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_PLAN_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "not_null_W_STR_PLAN_D_K_PLAN_DLHK"], "unique_id": "test.dlh_stripe.not_null_W_STR_PLAN_D_K_PLAN_DLHK.569c376e05", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "not_null_W_STR_PLAN_D_K_PLAN_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_STR_PLAN_D_K_PLAN_DLHK", "alias": "not_null_W_STR_PLAN_D_K_PLAN_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_PLAN_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/not_null_W_STR_PLAN_D_K_PLAN_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.202432, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_PLAN_D\nwhere K_PLAN_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PLAN_DLHK", "file_key_name": "models.W_STR_PLAN_D"}, "test.dlh_stripe.unique_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK.5cf5d425aa": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_BALANCE_TRANSACTION_DLHK", "model": "{{ get_where_subquery(ref('W_STR_BALANCE_TRANSACTION_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "unique_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK"], "unique_id": "test.dlh_stripe.unique_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK.5cf5d425aa", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "unique_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK", "alias": "unique_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_BALANCE_TRANSACTION_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/unique_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.203189, "compiled_sql": "\n    \n    \n\nselect\n    K_BALANCE_TRANSACTION_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_BALANCE_TRANSACTION_F\nwhere K_BALANCE_TRANSACTION_DLHK is not null\ngroup by K_BALANCE_TRANSACTION_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_BALANCE_TRANSACTION_DLHK", "file_key_name": "models.W_STR_BALANCE_TRANSACTION_F"}, "test.dlh_stripe.not_null_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK.9dae5af3dc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_BALANCE_TRANSACTION_DLHK", "model": "{{ get_where_subquery(ref('W_STR_BALANCE_TRANSACTION_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "not_null_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK"], "unique_id": "test.dlh_stripe.not_null_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK.9dae5af3dc", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "not_null_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK", "alias": "not_null_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_BALANCE_TRANSACTION_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/not_null_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.203939, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_BALANCE_TRANSACTION_F\nwhere K_BALANCE_TRANSACTION_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_BALANCE_TRANSACTION_DLHK", "file_key_name": "models.W_STR_BALANCE_TRANSACTION_F"}, "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_K_STR_PAYMENT_METHOD_DLHK__K_PAYMENT_METHOD_DLHK__ref_W_STR_PAYMENT_METHOD_D_.ca84a7745d": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_W_STR_BALANCE_TR_698687e468adf011e8b2f22f744d7561\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_STR_PAYMENT_METHOD_D')", "field": "K_PAYMENT_METHOD_DLHK", "column_name": "K_STR_PAYMENT_METHOD_DLHK", "model": "{{ get_where_subquery(ref('W_STR_BALANCE_TRANSACTION_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_PAYMENT_METHOD_D", "model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F"]}, "config": {"enabled": true, "alias": "relationships_W_STR_BALANCE_TR_698687e468adf011e8b2f22f744d7561", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "relationships_W_STR_BALANCE_TRANSACTION_F_K_STR_PAYMENT_METHOD_DLHK__K_PAYMENT_METHOD_DLHK__ref_W_STR_PAYMENT_METHOD_D_"], "unique_id": "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_K_STR_PAYMENT_METHOD_DLHK__K_PAYMENT_METHOD_DLHK__ref_W_STR_PAYMENT_METHOD_D_.ca84a7745d", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "relationships_W_STR_BALANCE_TR_698687e468adf011e8b2f22f744d7561.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_STR_BALANCE_TRANSACTION_F_K_STR_PAYMENT_METHOD_DLHK__K_PAYMENT_METHOD_DLHK__ref_W_STR_PAYMENT_METHOD_D_", "alias": "relationships_W_STR_BALANCE_TR_698687e468adf011e8b2f22f744d7561", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_PAYMENT_METHOD_D"], ["W_STR_BALANCE_TRANSACTION_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/relationships_W_STR_BALANCE_TR_698687e468adf011e8b2f22f744d7561.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_STR_BALANCE_TR_698687e468adf011e8b2f22f744d7561"}, "created_at": 1654860406.2048142, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_STR_PAYMENT_METHOD_DLHK as from_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_BALANCE_TRANSACTION_F\n    where K_STR_PAYMENT_METHOD_DLHK is not null\n),\n\nparent as (\n    select K_PAYMENT_METHOD_DLHK as to_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_PAYMENT_METHOD_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_STR_PAYMENT_METHOD_DLHK", "file_key_name": "models.W_STR_BALANCE_TRANSACTION_F"}, "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_K_CHARGE_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.3e142faa2f": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_W_STR_BALANCE_TR_b2dc4c2773432ac1680be0f19225b106\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_STR_CUSTOMER_D')", "field": "K_CUSTOMER_DLHK", "column_name": "K_CHARGE_CUSTOMER_DLHK", "model": "{{ get_where_subquery(ref('W_STR_BALANCE_TRANSACTION_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_CUSTOMER_D", "model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F"]}, "config": {"enabled": true, "alias": "relationships_W_STR_BALANCE_TR_b2dc4c2773432ac1680be0f19225b106", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "relationships_W_STR_BALANCE_TRANSACTION_F_K_CHARGE_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_"], "unique_id": "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_K_CHARGE_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.3e142faa2f", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "relationships_W_STR_BALANCE_TR_b2dc4c2773432ac1680be0f19225b106.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_STR_BALANCE_TRANSACTION_F_K_CHARGE_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_", "alias": "relationships_W_STR_BALANCE_TR_b2dc4c2773432ac1680be0f19225b106", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_CUSTOMER_D"], ["W_STR_BALANCE_TRANSACTION_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/relationships_W_STR_BALANCE_TR_b2dc4c2773432ac1680be0f19225b106.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_STR_BALANCE_TR_b2dc4c2773432ac1680be0f19225b106"}, "created_at": 1654860406.210485, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CHARGE_CUSTOMER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_BALANCE_TRANSACTION_F\n    where K_CHARGE_CUSTOMER_DLHK is not null\n),\n\nparent as (\n    select K_CUSTOMER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_CUSTOMER_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CHARGE_CUSTOMER_DLHK", "file_key_name": "models.W_STR_BALANCE_TRANSACTION_F"}, "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.cbe37b8f83": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_W_STR_BALANCE_TR_8677b2a20251f14c9cea1c5f463636d5\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_STR_DATE_D')", "field": "K_DATE_BK", "column_name": "A_CREATED_DATE_AT", "model": "{{ get_where_subquery(ref('W_STR_BALANCE_TRANSACTION_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_DATE_D", "model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F"]}, "config": {"enabled": true, "alias": "relationships_W_STR_BALANCE_TR_8677b2a20251f14c9cea1c5f463636d5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "relationships_W_STR_BALANCE_TRANSACTION_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_"], "unique_id": "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.cbe37b8f83", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "relationships_W_STR_BALANCE_TR_8677b2a20251f14c9cea1c5f463636d5.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_STR_BALANCE_TRANSACTION_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_", "alias": "relationships_W_STR_BALANCE_TR_8677b2a20251f14c9cea1c5f463636d5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_DATE_D"], ["W_STR_BALANCE_TRANSACTION_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/relationships_W_STR_BALANCE_TR_8677b2a20251f14c9cea1c5f463636d5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_STR_BALANCE_TR_8677b2a20251f14c9cea1c5f463636d5"}, "created_at": 1654860406.212908, "compiled_sql": "\n    \n    \n\nwith child as (\n    select A_CREATED_DATE_AT as from_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_BALANCE_TRANSACTION_F\n    where A_CREATED_DATE_AT is not null\n),\n\nparent as (\n    select K_DATE_BK as to_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_DATE_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "A_CREATED_DATE_AT", "file_key_name": "models.W_STR_BALANCE_TRANSACTION_F"}, "test.dlh_stripe.unique_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK.a1a9d99086": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_CREDIT_NOTE_DLHK", "model": "{{ get_where_subquery(ref('W_STR_CREDIT_NOTES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_CREDIT_NOTES_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "unique_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK"], "unique_id": "test.dlh_stripe.unique_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK.a1a9d99086", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "unique_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK", "alias": "unique_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_CREDIT_NOTES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/unique_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.215316, "compiled_sql": "\n    \n    \n\nselect\n    K_CREDIT_NOTE_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_CREDIT_NOTES_F\nwhere K_CREDIT_NOTE_DLHK is not null\ngroup by K_CREDIT_NOTE_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CREDIT_NOTE_DLHK", "file_key_name": "models.W_STR_CREDIT_NOTES_F"}, "test.dlh_stripe.not_null_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK.81b123fe3b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_CREDIT_NOTE_DLHK", "model": "{{ get_where_subquery(ref('W_STR_CREDIT_NOTES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_CREDIT_NOTES_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "not_null_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK"], "unique_id": "test.dlh_stripe.not_null_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK.81b123fe3b", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "not_null_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK", "alias": "not_null_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_CREDIT_NOTES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/not_null_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.216115, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_CREDIT_NOTES_F\nwhere K_CREDIT_NOTE_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CREDIT_NOTE_DLHK", "file_key_name": "models.W_STR_CREDIT_NOTES_F"}, "test.dlh_stripe.relationships_W_STR_CREDIT_NOTES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.51e7fe158e": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_W_STR_CREDIT_NOT_b6ad94ab3413a193584c2c8378b77044\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_STR_CUSTOMER_D')", "field": "K_CUSTOMER_DLHK", "column_name": "K_CUSTOMER_DLHK", "model": "{{ get_where_subquery(ref('W_STR_CREDIT_NOTES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_CUSTOMER_D", "model.dlh_stripe.W_STR_CREDIT_NOTES_F"]}, "config": {"enabled": true, "alias": "relationships_W_STR_CREDIT_NOT_b6ad94ab3413a193584c2c8378b77044", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "relationships_W_STR_CREDIT_NOTES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_"], "unique_id": "test.dlh_stripe.relationships_W_STR_CREDIT_NOTES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.51e7fe158e", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "relationships_W_STR_CREDIT_NOT_b6ad94ab3413a193584c2c8378b77044.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_STR_CREDIT_NOTES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_", "alias": "relationships_W_STR_CREDIT_NOT_b6ad94ab3413a193584c2c8378b77044", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_CUSTOMER_D"], ["W_STR_CREDIT_NOTES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/relationships_W_STR_CREDIT_NOT_b6ad94ab3413a193584c2c8378b77044.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_STR_CREDIT_NOT_b6ad94ab3413a193584c2c8378b77044"}, "created_at": 1654860406.216897, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CUSTOMER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_CREDIT_NOTES_F\n    where K_CUSTOMER_DLHK is not null\n),\n\nparent as (\n    select K_CUSTOMER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_CUSTOMER_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CUSTOMER_DLHK", "file_key_name": "models.W_STR_CREDIT_NOTES_F"}, "test.dlh_stripe.relationships_W_STR_CREDIT_NOTES_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.d603af3cf4": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_W_STR_CREDIT_NOT_aee86d57cde015b7ca9f2a0dde27daf5\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_STR_DATE_D')", "field": "K_DATE_BK", "column_name": "A_CREATED_DATE_AT", "model": "{{ get_where_subquery(ref('W_STR_CREDIT_NOTES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_DATE_D", "model.dlh_stripe.W_STR_CREDIT_NOTES_F"]}, "config": {"enabled": true, "alias": "relationships_W_STR_CREDIT_NOT_aee86d57cde015b7ca9f2a0dde27daf5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "relationships_W_STR_CREDIT_NOTES_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_"], "unique_id": "test.dlh_stripe.relationships_W_STR_CREDIT_NOTES_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.d603af3cf4", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "relationships_W_STR_CREDIT_NOT_aee86d57cde015b7ca9f2a0dde27daf5.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_STR_CREDIT_NOTES_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_", "alias": "relationships_W_STR_CREDIT_NOT_aee86d57cde015b7ca9f2a0dde27daf5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_DATE_D"], ["W_STR_CREDIT_NOTES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/relationships_W_STR_CREDIT_NOT_aee86d57cde015b7ca9f2a0dde27daf5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_STR_CREDIT_NOT_aee86d57cde015b7ca9f2a0dde27daf5"}, "created_at": 1654860406.219541, "compiled_sql": "\n    \n    \n\nwith child as (\n    select A_CREATED_DATE_AT as from_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_CREDIT_NOTES_F\n    where A_CREATED_DATE_AT is not null\n),\n\nparent as (\n    select K_DATE_BK as to_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_DATE_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "A_CREATED_DATE_AT", "file_key_name": "models.W_STR_CREDIT_NOTES_F"}, "test.dlh_stripe.unique_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK.4f12428a54": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_INVOICE_LINE_ITEM_DLHK", "model": "{{ get_where_subquery(ref('W_STR_INVOICE_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_INVOICE_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "unique_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK"], "unique_id": "test.dlh_stripe.unique_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK.4f12428a54", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "unique_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK", "alias": "unique_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_INVOICE_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/unique_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.221892, "compiled_sql": "\n    \n    \n\nselect\n    K_INVOICE_LINE_ITEM_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_INVOICE_F\nwhere K_INVOICE_LINE_ITEM_DLHK is not null\ngroup by K_INVOICE_LINE_ITEM_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_INVOICE_LINE_ITEM_DLHK", "file_key_name": "models.W_STR_INVOICE_F"}, "test.dlh_stripe.not_null_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK.4ed964a8c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_INVOICE_LINE_ITEM_DLHK", "model": "{{ get_where_subquery(ref('W_STR_INVOICE_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_INVOICE_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "not_null_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK"], "unique_id": "test.dlh_stripe.not_null_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK.4ed964a8c9", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "not_null_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK", "alias": "not_null_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_INVOICE_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/not_null_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.222672, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_INVOICE_F\nwhere K_INVOICE_LINE_ITEM_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_INVOICE_LINE_ITEM_DLHK", "file_key_name": "models.W_STR_INVOICE_F"}, "test.dlh_stripe.relationships_W_STR_INVOICE_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.3db851b367": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_W_STR_INVOICE_F_0e00d23d0da7f74994130c0aee204588\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_STR_CUSTOMER_D')", "field": "K_CUSTOMER_DLHK", "column_name": "K_CUSTOMER_DLHK", "model": "{{ get_where_subquery(ref('W_STR_INVOICE_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_CUSTOMER_D", "model.dlh_stripe.W_STR_INVOICE_F"]}, "config": {"enabled": true, "alias": "relationships_W_STR_INVOICE_F_0e00d23d0da7f74994130c0aee204588", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "relationships_W_STR_INVOICE_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_"], "unique_id": "test.dlh_stripe.relationships_W_STR_INVOICE_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.3db851b367", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "relationships_W_STR_INVOICE_F_0e00d23d0da7f74994130c0aee204588.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_STR_INVOICE_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_", "alias": "relationships_W_STR_INVOICE_F_0e00d23d0da7f74994130c0aee204588", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_CUSTOMER_D"], ["W_STR_INVOICE_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/relationships_W_STR_INVOICE_F_0e00d23d0da7f74994130c0aee204588.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_STR_INVOICE_F_0e00d23d0da7f74994130c0aee204588"}, "created_at": 1654860406.223455, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CUSTOMER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_INVOICE_F\n    where K_CUSTOMER_DLHK is not null\n),\n\nparent as (\n    select K_CUSTOMER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_CUSTOMER_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CUSTOMER_DLHK", "file_key_name": "models.W_STR_INVOICE_F"}, "test.dlh_stripe.relationships_W_STR_INVOICE_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.c471e57762": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_W_STR_INVOICE_F_af412a5d1c2be65fe315e3c2197d714a\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_STR_PLAN_D')", "field": "K_PLAN_DLHK", "column_name": "K_PLAN_DLHK", "model": "{{ get_where_subquery(ref('W_STR_INVOICE_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_PLAN_D", "model.dlh_stripe.W_STR_INVOICE_F"]}, "config": {"enabled": true, "alias": "relationships_W_STR_INVOICE_F_af412a5d1c2be65fe315e3c2197d714a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "relationships_W_STR_INVOICE_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_"], "unique_id": "test.dlh_stripe.relationships_W_STR_INVOICE_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.c471e57762", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "relationships_W_STR_INVOICE_F_af412a5d1c2be65fe315e3c2197d714a.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_STR_INVOICE_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_", "alias": "relationships_W_STR_INVOICE_F_af412a5d1c2be65fe315e3c2197d714a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_PLAN_D"], ["W_STR_INVOICE_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/relationships_W_STR_INVOICE_F_af412a5d1c2be65fe315e3c2197d714a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_STR_INVOICE_F_af412a5d1c2be65fe315e3c2197d714a"}, "created_at": 1654860406.225857, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_PLAN_DLHK as from_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_INVOICE_F\n    where K_PLAN_DLHK is not null\n),\n\nparent as (\n    select K_PLAN_DLHK as to_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_PLAN_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PLAN_DLHK", "file_key_name": "models.W_STR_INVOICE_F"}, "test.dlh_stripe.relationships_W_STR_INVOICE_F_A_INVOICE_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.454b1f5d18": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_W_STR_INVOICE_F_7d5cc7486e6539d44238aa980c560597\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_STR_DATE_D')", "field": "K_DATE_BK", "column_name": "A_INVOICE_CREATED_DATE_AT", "model": "{{ get_where_subquery(ref('W_STR_INVOICE_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_DATE_D", "model.dlh_stripe.W_STR_INVOICE_F"]}, "config": {"enabled": true, "alias": "relationships_W_STR_INVOICE_F_7d5cc7486e6539d44238aa980c560597", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "relationships_W_STR_INVOICE_F_A_INVOICE_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_"], "unique_id": "test.dlh_stripe.relationships_W_STR_INVOICE_F_A_INVOICE_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.454b1f5d18", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "relationships_W_STR_INVOICE_F_7d5cc7486e6539d44238aa980c560597.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_STR_INVOICE_F_A_INVOICE_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_", "alias": "relationships_W_STR_INVOICE_F_7d5cc7486e6539d44238aa980c560597", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_DATE_D"], ["W_STR_INVOICE_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/relationships_W_STR_INVOICE_F_7d5cc7486e6539d44238aa980c560597.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_STR_INVOICE_F_7d5cc7486e6539d44238aa980c560597"}, "created_at": 1654860406.22823, "compiled_sql": "\n    \n    \n\nwith child as (\n    select A_INVOICE_CREATED_DATE_AT as from_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_INVOICE_F\n    where A_INVOICE_CREATED_DATE_AT is not null\n),\n\nparent as (\n    select K_DATE_BK as to_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_DATE_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "A_INVOICE_CREATED_DATE_AT", "file_key_name": "models.W_STR_INVOICE_F"}, "test.dlh_stripe.unique_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK.a835da90c7": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_SUBSCRIPTION_BY_PLAN_DLHK", "model": "{{ get_where_subquery(ref('W_STR_SUBSCRIPTION_BY_PLAN_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "unique_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK"], "unique_id": "test.dlh_stripe.unique_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK.a835da90c7", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "unique_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK", "alias": "unique_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_SUBSCRIPTION_BY_PLAN_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/unique_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.230607, "compiled_sql": "\n    \n    \n\nselect\n    K_SUBSCRIPTION_BY_PLAN_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_SUBSCRIPTION_BY_PLAN_F\nwhere K_SUBSCRIPTION_BY_PLAN_DLHK is not null\ngroup by K_SUBSCRIPTION_BY_PLAN_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_SUBSCRIPTION_BY_PLAN_DLHK", "file_key_name": "models.W_STR_SUBSCRIPTION_BY_PLAN_F"}, "test.dlh_stripe.not_null_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK.d4f5409fd3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_W_STR_SUBSCRIPTION_BY_3be283374d3525a2c204c27e1c28a954\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_SUBSCRIPTION_BY_PLAN_DLHK", "model": "{{ get_where_subquery(ref('W_STR_SUBSCRIPTION_BY_PLAN_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F"]}, "config": {"enabled": true, "alias": "not_null_W_STR_SUBSCRIPTION_BY_3be283374d3525a2c204c27e1c28a954", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "not_null_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK"], "unique_id": "test.dlh_stripe.not_null_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK.d4f5409fd3", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "not_null_W_STR_SUBSCRIPTION_BY_3be283374d3525a2c204c27e1c28a954.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK", "alias": "not_null_W_STR_SUBSCRIPTION_BY_3be283374d3525a2c204c27e1c28a954", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_SUBSCRIPTION_BY_PLAN_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/not_null_W_STR_SUBSCRIPTION_BY_3be283374d3525a2c204c27e1c28a954.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_W_STR_SUBSCRIPTION_BY_3be283374d3525a2c204c27e1c28a954"}, "created_at": 1654860406.231395, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_SUBSCRIPTION_BY_PLAN_F\nwhere K_SUBSCRIPTION_BY_PLAN_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_SUBSCRIPTION_BY_PLAN_DLHK", "file_key_name": "models.W_STR_SUBSCRIPTION_BY_PLAN_F"}, "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.7d5d1609c5": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_W_STR_SUBSCRIPTI_7fb8084aaaaee243443f2d5dbadef812\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_STR_CUSTOMER_D')", "field": "K_CUSTOMER_DLHK", "column_name": "K_CUSTOMER_DLHK", "model": "{{ get_where_subquery(ref('W_STR_SUBSCRIPTION_BY_PLAN_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_CUSTOMER_D", "model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F"]}, "config": {"enabled": true, "alias": "relationships_W_STR_SUBSCRIPTI_7fb8084aaaaee243443f2d5dbadef812", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_"], "unique_id": "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.7d5d1609c5", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "relationships_W_STR_SUBSCRIPTI_7fb8084aaaaee243443f2d5dbadef812.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_", "alias": "relationships_W_STR_SUBSCRIPTI_7fb8084aaaaee243443f2d5dbadef812", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_CUSTOMER_D"], ["W_STR_SUBSCRIPTION_BY_PLAN_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/relationships_W_STR_SUBSCRIPTI_7fb8084aaaaee243443f2d5dbadef812.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_STR_SUBSCRIPTI_7fb8084aaaaee243443f2d5dbadef812"}, "created_at": 1654860406.23236, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CUSTOMER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_SUBSCRIPTION_BY_PLAN_F\n    where K_CUSTOMER_DLHK is not null\n),\n\nparent as (\n    select K_CUSTOMER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_CUSTOMER_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CUSTOMER_DLHK", "file_key_name": "models.W_STR_SUBSCRIPTION_BY_PLAN_F"}, "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.b0117f8e28": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_W_STR_SUBSCRIPTI_b80d8872ee7057c91987718060970721\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_STR_PLAN_D')", "field": "K_PLAN_DLHK", "column_name": "K_PLAN_DLHK", "model": "{{ get_where_subquery(ref('W_STR_SUBSCRIPTION_BY_PLAN_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_PLAN_D", "model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F"]}, "config": {"enabled": true, "alias": "relationships_W_STR_SUBSCRIPTI_b80d8872ee7057c91987718060970721", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_"], "unique_id": "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.b0117f8e28", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "relationships_W_STR_SUBSCRIPTI_b80d8872ee7057c91987718060970721.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_", "alias": "relationships_W_STR_SUBSCRIPTI_b80d8872ee7057c91987718060970721", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_PLAN_D"], ["W_STR_SUBSCRIPTION_BY_PLAN_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/relationships_W_STR_SUBSCRIPTI_b80d8872ee7057c91987718060970721.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_STR_SUBSCRIPTI_b80d8872ee7057c91987718060970721"}, "created_at": 1654860406.234656, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_PLAN_DLHK as from_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_SUBSCRIPTION_BY_PLAN_F\n    where K_PLAN_DLHK is not null\n),\n\nparent as (\n    select K_PLAN_DLHK as to_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_PLAN_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PLAN_DLHK", "file_key_name": "models.W_STR_SUBSCRIPTION_BY_PLAN_F"}, "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_A_DATE_REF__K_DATE_BK__ref_W_STR_DATE_D_.7d65410f95": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_W_STR_SUBSCRIPTI_b9bbb53bae1c719545a9d600274d8a8a\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_STR_DATE_D')", "field": "K_DATE_BK", "column_name": "A_DATE_REF", "model": "{{ get_where_subquery(ref('W_STR_SUBSCRIPTION_BY_PLAN_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_DATE_D", "model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F"]}, "config": {"enabled": true, "alias": "relationships_W_STR_SUBSCRIPTI_b9bbb53bae1c719545a9d600274d8a8a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_A_DATE_REF__K_DATE_BK__ref_W_STR_DATE_D_"], "unique_id": "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_A_DATE_REF__K_DATE_BK__ref_W_STR_DATE_D_.7d65410f95", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "relationships_W_STR_SUBSCRIPTI_b9bbb53bae1c719545a9d600274d8a8a.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_A_DATE_REF__K_DATE_BK__ref_W_STR_DATE_D_", "alias": "relationships_W_STR_SUBSCRIPTI_b9bbb53bae1c719545a9d600274d8a8a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_DATE_D"], ["W_STR_SUBSCRIPTION_BY_PLAN_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/relationships_W_STR_SUBSCRIPTI_b9bbb53bae1c719545a9d600274d8a8a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_STR_SUBSCRIPTI_b9bbb53bae1c719545a9d600274d8a8a"}, "created_at": 1654860406.237045, "compiled_sql": "\n    \n    \n\nwith child as (\n    select A_DATE_REF as from_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_SUBSCRIPTION_BY_PLAN_F\n    where A_DATE_REF is not null\n),\n\nparent as (\n    select K_DATE_BK as to_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_DATE_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "A_DATE_REF", "file_key_name": "models.W_STR_SUBSCRIPTION_BY_PLAN_F"}, "test.dlh_stripe.unique_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK.d73112adef": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_SUBSCRIPTION_ITEM_DLHK", "model": "{{ get_where_subquery(ref('W_STR_SUBSCRIPTION_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_SUBSCRIPTION_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "unique_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK"], "unique_id": "test.dlh_stripe.unique_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK.d73112adef", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "unique_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK", "alias": "unique_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_SUBSCRIPTION_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/unique_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.239404, "compiled_sql": "\n    \n    \n\nselect\n    K_SUBSCRIPTION_ITEM_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_SUBSCRIPTION_F\nwhere K_SUBSCRIPTION_ITEM_DLHK is not null\ngroup by K_SUBSCRIPTION_ITEM_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_SUBSCRIPTION_ITEM_DLHK", "file_key_name": "models.W_STR_SUBSCRIPTION_F"}, "test.dlh_stripe.not_null_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK.e56d4745fb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_SUBSCRIPTION_ITEM_DLHK", "model": "{{ get_where_subquery(ref('W_STR_SUBSCRIPTION_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_SUBSCRIPTION_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "not_null_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK"], "unique_id": "test.dlh_stripe.not_null_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK.e56d4745fb", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "not_null_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK", "alias": "not_null_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_SUBSCRIPTION_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/not_null_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654860406.240177, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_SUBSCRIPTION_F\nwhere K_SUBSCRIPTION_ITEM_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_SUBSCRIPTION_ITEM_DLHK", "file_key_name": "models.W_STR_SUBSCRIPTION_F"}, "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.2d14fded03": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_W_STR_SUBSCRIPTI_10f3013f9403ad43ad6cf535f868d49c\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_STR_CUSTOMER_D')", "field": "K_CUSTOMER_DLHK", "column_name": "K_CUSTOMER_DLHK", "model": "{{ get_where_subquery(ref('W_STR_SUBSCRIPTION_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_CUSTOMER_D", "model.dlh_stripe.W_STR_SUBSCRIPTION_F"]}, "config": {"enabled": true, "alias": "relationships_W_STR_SUBSCRIPTI_10f3013f9403ad43ad6cf535f868d49c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "relationships_W_STR_SUBSCRIPTION_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_"], "unique_id": "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.2d14fded03", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "relationships_W_STR_SUBSCRIPTI_10f3013f9403ad43ad6cf535f868d49c.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_STR_SUBSCRIPTION_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_", "alias": "relationships_W_STR_SUBSCRIPTI_10f3013f9403ad43ad6cf535f868d49c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_CUSTOMER_D"], ["W_STR_SUBSCRIPTION_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/relationships_W_STR_SUBSCRIPTI_10f3013f9403ad43ad6cf535f868d49c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_STR_SUBSCRIPTI_10f3013f9403ad43ad6cf535f868d49c"}, "created_at": 1654860406.241099, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CUSTOMER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_SUBSCRIPTION_F\n    where K_CUSTOMER_DLHK is not null\n),\n\nparent as (\n    select K_CUSTOMER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_CUSTOMER_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CUSTOMER_DLHK", "file_key_name": "models.W_STR_SUBSCRIPTION_F"}, "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.97e6d341b2": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_W_STR_SUBSCRIPTI_083fb6a5b3c1ff74cfe55a3da49ac027\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_STR_PLAN_D')", "field": "K_PLAN_DLHK", "column_name": "K_PLAN_DLHK", "model": "{{ get_where_subquery(ref('W_STR_SUBSCRIPTION_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_PLAN_D", "model.dlh_stripe.W_STR_SUBSCRIPTION_F"]}, "config": {"enabled": true, "alias": "relationships_W_STR_SUBSCRIPTI_083fb6a5b3c1ff74cfe55a3da49ac027", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "relationships_W_STR_SUBSCRIPTION_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_"], "unique_id": "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.97e6d341b2", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "relationships_W_STR_SUBSCRIPTI_083fb6a5b3c1ff74cfe55a3da49ac027.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_STR_SUBSCRIPTION_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_", "alias": "relationships_W_STR_SUBSCRIPTI_083fb6a5b3c1ff74cfe55a3da49ac027", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_PLAN_D"], ["W_STR_SUBSCRIPTION_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/relationships_W_STR_SUBSCRIPTI_083fb6a5b3c1ff74cfe55a3da49ac027.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_STR_SUBSCRIPTI_083fb6a5b3c1ff74cfe55a3da49ac027"}, "created_at": 1654860406.2433841, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_PLAN_DLHK as from_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_SUBSCRIPTION_F\n    where K_PLAN_DLHK is not null\n),\n\nparent as (\n    select K_PLAN_DLHK as to_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_PLAN_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PLAN_DLHK", "file_key_name": "models.W_STR_SUBSCRIPTION_F"}, "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_A_ITEM_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.2d5cef9214": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_W_STR_SUBSCRIPTI_c516d2b0ddb42468ec460a30d6cb90b1\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_STR_DATE_D')", "field": "K_DATE_BK", "column_name": "A_ITEM_CREATED_DATE_AT", "model": "{{ get_where_subquery(ref('W_STR_SUBSCRIPTION_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_stripe.W_STR_DATE_D", "model.dlh_stripe.W_STR_SUBSCRIPTION_F"]}, "config": {"enabled": true, "alias": "relationships_W_STR_SUBSCRIPTI_c516d2b0ddb42468ec460a30d6cb90b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DATALAKEHOUSE_dbt_test__audit", "fqn": ["dlh_stripe", "relationships_W_STR_SUBSCRIPTION_F_A_ITEM_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_"], "unique_id": "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_A_ITEM_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.2d5cef9214", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "relationships_W_STR_SUBSCRIPTI_c516d2b0ddb42468ec460a30d6cb90b1.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_STR_SUBSCRIPTION_F_A_ITEM_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_", "alias": "relationships_W_STR_SUBSCRIPTI_c516d2b0ddb42468ec460a30d6cb90b1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["W_STR_DATE_D"], ["W_STR_SUBSCRIPTION_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_stripe/models/schema.yml/relationships_W_STR_SUBSCRIPTI_c516d2b0ddb42468ec460a30d6cb90b1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_STR_SUBSCRIPTI_c516d2b0ddb42468ec460a30d6cb90b1"}, "created_at": 1654860406.245774, "compiled_sql": "\n    \n    \n\nwith child as (\n    select A_ITEM_CREATED_DATE_AT as from_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_SUBSCRIPTION_F\n    where A_ITEM_CREATED_DATE_AT is not null\n),\n\nparent as (\n    select K_DATE_BK as to_field\n    from DEVELOPER_SANDBOX.DATALAKEHOUSE_STRIPE.W_STR_DATE_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "A_ITEM_CREATED_DATE_AT", "file_key_name": "models.W_STR_SUBSCRIPTION_F"}}, "sources": {"source.dlh_stripe.DEMO_STRIPE.BALANCE_TRANSACTION": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "BALANCE_TRANSACTION"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.BALANCE_TRANSACTION", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "BALANCE_TRANSACTION", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "BALANCE_TRANSACTION", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"BALANCE_TRANSACTION\"", "created_at": 1654860406.255875}, "source.dlh_stripe.DEMO_STRIPE.CHARGE": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "CHARGE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.CHARGE", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CHARGE", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "CHARGE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"CHARGE\"", "created_at": 1654860406.255948}, "source.dlh_stripe.DEMO_STRIPE.CUSTOMER": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "CUSTOMER"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.CUSTOMER", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CUSTOMER", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "CUSTOMER", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"CUSTOMER\"", "created_at": 1654860406.2560031}, "source.dlh_stripe.DEMO_STRIPE.PAYMENT_INTENT": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "PAYMENT_INTENT"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.PAYMENT_INTENT", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PAYMENT_INTENT", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "PAYMENT_INTENT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"PAYMENT_INTENT\"", "created_at": 1654860406.256052}, "source.dlh_stripe.DEMO_STRIPE.PAYMENT_METHOD": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "PAYMENT_METHOD"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.PAYMENT_METHOD", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PAYMENT_METHOD", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "PAYMENT_METHOD", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"PAYMENT_METHOD\"", "created_at": 1654860406.2561002}, "source.dlh_stripe.DEMO_STRIPE.PAYMENT_METHOD_CARD": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "PAYMENT_METHOD_CARD"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.PAYMENT_METHOD_CARD", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PAYMENT_METHOD_CARD", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "PAYMENT_METHOD_CARD", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"PAYMENT_METHOD_CARD\"", "created_at": 1654860406.256147}, "source.dlh_stripe.DEMO_STRIPE.PAYOUT": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "PAYOUT"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.PAYOUT", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PAYOUT", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "PAYOUT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"PAYOUT\"", "created_at": 1654860406.256193}, "source.dlh_stripe.DEMO_STRIPE.REFUND": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "REFUND"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.REFUND", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "REFUND", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "REFUND", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"REFUND\"", "created_at": 1654860406.2562401}, "source.dlh_stripe.DEMO_STRIPE.CARD": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "CARD"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.CARD", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CARD", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "CARD", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"CARD\"", "created_at": 1654860406.256285}, "source.dlh_stripe.DEMO_STRIPE.PLAN": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "PLAN"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.PLAN", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PLAN", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "PLAN", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"PLAN\"", "created_at": 1654860406.256331}, "source.dlh_stripe.DEMO_STRIPE.PRODUCT": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "PRODUCT"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.PRODUCT", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PRODUCT", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "PRODUCT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"PRODUCT\"", "created_at": 1654860406.2563782}, "source.dlh_stripe.DEMO_STRIPE.INVOICE": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "INVOICE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.INVOICE", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "INVOICE", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "INVOICE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"INVOICE\"", "created_at": 1654860406.256424}, "source.dlh_stripe.DEMO_STRIPE.INVOICE_LINE_ITEM": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "INVOICE_LINE_ITEM"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.INVOICE_LINE_ITEM", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "INVOICE_LINE_ITEM", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "INVOICE_LINE_ITEM", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"INVOICE_LINE_ITEM\"", "created_at": 1654860406.256469}, "source.dlh_stripe.DEMO_STRIPE.SUBSCRIPTION": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "SUBSCRIPTION"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.SUBSCRIPTION", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "SUBSCRIPTION", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "SUBSCRIPTION", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"SUBSCRIPTION\"", "created_at": 1654860406.256514}, "source.dlh_stripe.DEMO_STRIPE.SUBSCRIPTION_ITEM": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "SUBSCRIPTION_ITEM"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.SUBSCRIPTION_ITEM", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "SUBSCRIPTION_ITEM", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "SUBSCRIPTION_ITEM", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"SUBSCRIPTION_ITEM\"", "created_at": 1654860406.2565591}, "source.dlh_stripe.DEMO_STRIPE.STRIPE_ORDER": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "STRIPE_ORDER"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.STRIPE_ORDER", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "STRIPE_ORDER", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "STRIPE_ORDER", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"STRIPE_ORDER\"", "created_at": 1654860406.256604}, "source.dlh_stripe.DEMO_STRIPE.ORDER_ITEM": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "ORDER_ITEM"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.ORDER_ITEM", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "ORDER_ITEM", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "ORDER_ITEM", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"ORDER_ITEM\"", "created_at": 1654860406.256649}, "source.dlh_stripe.DEMO_STRIPE.ORDER_RETURN": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "ORDER_RETURN"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.ORDER_RETURN", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "ORDER_RETURN", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "ORDER_RETURN", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"ORDER_RETURN\"", "created_at": 1654860406.256694}, "source.dlh_stripe.DEMO_STRIPE.ORDER_RETURN_ITEM": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "ORDER_RETURN_ITEM"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.ORDER_RETURN_ITEM", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "ORDER_RETURN_ITEM", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "ORDER_RETURN_ITEM", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"ORDER_RETURN_ITEM\"", "created_at": 1654860406.2567391}, "source.dlh_stripe.DEMO_STRIPE.CREDIT_NOTE": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "CREDIT_NOTE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.CREDIT_NOTE", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CREDIT_NOTE", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "CREDIT_NOTE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"CREDIT_NOTE\"", "created_at": 1654860406.256783}, "source.dlh_stripe.DEMO_STRIPE.CREDIT_NOTE_LINE_ITEM": {"fqn": ["dlh_stripe", "sources", "DEMO_STRIPE", "CREDIT_NOTE_LINE_ITEM"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_STRIPE", "unique_id": "source.dlh_stripe.DEMO_STRIPE.CREDIT_NOTE_LINE_ITEM", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CREDIT_NOTE_LINE_ITEM", "source_name": "DEMO_STRIPE", "source_description": "", "loader": "", "identifier": "CREDIT_NOTE_LINE_ITEM", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_STRIPE.\"CREDIT_NOTE_LINE_ITEM\"", "created_at": 1654860406.256856}}, "macros": {"macro.dlh_stripe.set_query_tag": {"unique_id": "macro.dlh_stripe.set_query_tag", "package_name": "dlh_stripe", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/stripe_dbt", "path": "macros/set_query_tag.sql", "original_file_path": "macros/set_query_tag.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n\n  {% set project_tag = model.package_name %} \n  {% set new_query_tag = model.name %} \n  \n\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '{0}'. Will reset to '{1}' after materialization.\".format(new_query_tag, original_query_tag)) }}\n    {% do run_query(\"alter session set query_tag = 'dbt|{}|{}'\".format(project_tag,new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.882345}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.883413}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.8961432}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) %}\n  {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.89655}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {% if (column_name|upper in model_columns) or (column_name in model_columns) %}\n      {{ get_column_comment_sql(column_name, model_columns) }}\n    {% else %}\n      {{column_name}}\n    {% endif %}\n    {{ \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.897074}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} \n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n    \n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.897982}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.8988109}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.899413}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.8999522}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.900314}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.900395}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.900587}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.900693}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.900893}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.901168}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.901387}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.902001}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.90219}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.902682}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9031968}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n    \n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n  \n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n    \n    {% do run_query(sql) %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.904015}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE \n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n  \n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.904277}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.904584}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n    \n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9060538}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9063559}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.906624}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9090612}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dlh_stripe.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.909375}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dlh_stripe.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.910039}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dlh_stripe.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.911545}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.912979}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.913545}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dlh_stripe.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9157288}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dlh_stripe.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.916182}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9173481}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.917553}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9176981}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.917839}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.917981}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.918418}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.918726}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.919042}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.919594}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.919957}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.923527}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.923711}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.923956}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9241128}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.924213}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.925041}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9252129}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9254}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.926414}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9283452}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.931819}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.932123}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.932302}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.932391}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9326122}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.933532}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.933727}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.933985}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.934421}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9407191}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.943292}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9439738}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.944309}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.944774}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.945178}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.946102}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.946698}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.947364}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.950328}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.951533}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.951884}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9524128}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.952707}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.953438}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.954273}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.959411}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.964643}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9661598}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.967469}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.96824}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.972227}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.972887}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.973087}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9732962}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9737432}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9775329}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.977922}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.978165}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.979455}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.979887}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.980054}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.980244}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9805079}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.983478}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.987777}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9887638}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.989012}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.989509}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9896588}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.989776}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9899478}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.990068}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.990565}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.990828}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.992086}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9926112}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9928489}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9934452}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.993713}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9940128}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.994487}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.994751}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.995167}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.9954119}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.995729}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.996369}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.99756}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.998168}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860405.998477}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.000332}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.001633}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.00241}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.00265}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.003105}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.003298}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.003463}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.003649}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.0042}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.004344}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.004508}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.004918}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.006631}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.006947}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.007141}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.00736}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.00755}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.0077171}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.00792}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.008209}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.008482}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.009303}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.009535}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.009734}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.010268}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.0104132}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.010645}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.011072}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.0118139}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.0119839}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.012188}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.0123541}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.012631}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.0131462}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.0146828}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.014949}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.015139}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.015292}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.01548}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.015737}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.015946}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.0163279}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.016525}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.0166888}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.0184698}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.018632}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.0189471}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.019137}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.019486}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.0197172}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.020333}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.020597}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.0214028}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.021989}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.022229}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.0225239}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654860406.022804}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.0.0_3/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dlh_stripe.V_STR_PAYMENT_INTENT_STG": ["source.dlh_stripe.DEMO_STRIPE.PAYMENT_INTENT"], "model.dlh_stripe.V_STR_CHARGES_STG": ["source.dlh_stripe.DEMO_STRIPE.CHARGE"], "model.dlh_stripe.V_STR_CREDIT_NOTE_HEADER_STG": ["source.dlh_stripe.DEMO_STRIPE.CREDIT_NOTE"], "model.dlh_stripe.V_STR_CREDIT_NOTES_STG": ["model.dlh_stripe.V_STR_CREDIT_NOTE_HEADER_STG", "model.dlh_stripe.V_STR_CREDIT_NOTE_LINE_ITEM_STG"], "model.dlh_stripe.V_STR_CREDIT_NOTE_LINE_ITEM_STG": ["source.dlh_stripe.DEMO_STRIPE.CREDIT_NOTE_LINE_ITEM"], "model.dlh_stripe.V_STR_INVOICES_STG": ["model.dlh_stripe.V_STR_INVOICE_HEADER_STG", "model.dlh_stripe.V_STR_INVOICE_LINE_ITEM_STG"], "model.dlh_stripe.V_STR_INVOICE_LINE_ITEM_STG": ["source.dlh_stripe.DEMO_STRIPE.INVOICE_LINE_ITEM"], "model.dlh_stripe.V_STR_INVOICE_HEADER_STG": ["source.dlh_stripe.DEMO_STRIPE.INVOICE"], "model.dlh_stripe.V_STR_PLAN_STG": ["source.dlh_stripe.DEMO_STRIPE.PLAN", "source.dlh_stripe.DEMO_STRIPE.PRODUCT"], "model.dlh_stripe.V_STR_DATE_STG": [], "model.dlh_stripe.V_STR_PAYMENT_METHOD_STG": ["source.dlh_stripe.DEMO_STRIPE.PAYMENT_METHOD", "source.dlh_stripe.DEMO_STRIPE.PAYMENT_METHOD_CARD"], "model.dlh_stripe.V_STR_SUBSCRIPTION_STG": ["source.dlh_stripe.DEMO_STRIPE.SUBSCRIPTION", "source.dlh_stripe.DEMO_STRIPE.SUBSCRIPTION_ITEM"], "model.dlh_stripe.V_STR_BALANCE_TRANSACTIONS_STG": ["source.dlh_stripe.DEMO_STRIPE.BALANCE_TRANSACTION"], "model.dlh_stripe.V_STR_REFUND_STG": ["source.dlh_stripe.DEMO_STRIPE.REFUND"], "model.dlh_stripe.V_STR_PAYOUT_STG": ["source.dlh_stripe.DEMO_STRIPE.PAYOUT"], "model.dlh_stripe.V_STR_CUSTOMERS_STG": ["source.dlh_stripe.DEMO_STRIPE.CUSTOMER"], "model.dlh_stripe.W_STR_SUBSCRIPTION_F": ["model.dlh_stripe.V_STR_SUBSCRIPTION_STG"], "model.dlh_stripe.W_STR_CREDIT_NOTES_F": ["model.dlh_stripe.V_STR_CREDIT_NOTES_STG"], "model.dlh_stripe.W_STR_INVOICE_F": ["model.dlh_stripe.V_STR_INVOICES_STG"], "model.dlh_stripe.W_STR_CUSTOMER_D": ["model.dlh_stripe.V_STR_CUSTOMERS_STG"], "model.dlh_stripe.W_STR_PAYMENT_METHOD_D": ["model.dlh_stripe.V_STR_PAYMENT_METHOD_STG"], "model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F": ["model.dlh_stripe.V_STR_BALANCE_TRANSACTIONS_STG", "model.dlh_stripe.V_STR_CHARGES_STG", "model.dlh_stripe.V_STR_PAYMENT_INTENT_STG", "model.dlh_stripe.V_STR_PAYOUT_STG", "model.dlh_stripe.V_STR_REFUND_STG"], "model.dlh_stripe.W_STR_DATE_D": ["model.dlh_stripe.V_STR_DATE_STG"], "model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F": ["model.dlh_stripe.W_STR_DATE_D", "model.dlh_stripe.W_STR_DATE_D", "model.dlh_stripe.W_STR_DATE_D", "model.dlh_stripe.W_STR_SUBSCRIPTION_F", "model.dlh_stripe.W_STR_SUBSCRIPTION_F", "model.dlh_stripe.W_STR_SUBSCRIPTION_F"], "model.dlh_stripe.W_STR_PLAN_D": ["model.dlh_stripe.V_STR_PLAN_STG"], "test.dlh_stripe.unique_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK.f605ac9ade": ["model.dlh_stripe.W_STR_CUSTOMER_D"], "test.dlh_stripe.not_null_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK.1c417e987d": ["model.dlh_stripe.W_STR_CUSTOMER_D"], "test.dlh_stripe.unique_W_STR_DATE_D_K_DATE_INTEGER_BK.a508cb2e42": ["model.dlh_stripe.W_STR_DATE_D"], "test.dlh_stripe.not_null_W_STR_DATE_D_K_DATE_INTEGER_BK.421e48be45": ["model.dlh_stripe.W_STR_DATE_D"], "test.dlh_stripe.unique_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK.116a474054": ["model.dlh_stripe.W_STR_PAYMENT_METHOD_D"], "test.dlh_stripe.not_null_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK.ac6f63c478": ["model.dlh_stripe.W_STR_PAYMENT_METHOD_D"], "test.dlh_stripe.unique_W_STR_PLAN_D_K_PLAN_DLHK.ca05c789c2": ["model.dlh_stripe.W_STR_PLAN_D"], "test.dlh_stripe.not_null_W_STR_PLAN_D_K_PLAN_DLHK.569c376e05": ["model.dlh_stripe.W_STR_PLAN_D"], "test.dlh_stripe.unique_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK.5cf5d425aa": ["model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F"], "test.dlh_stripe.not_null_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK.9dae5af3dc": ["model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F"], "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_K_STR_PAYMENT_METHOD_DLHK__K_PAYMENT_METHOD_DLHK__ref_W_STR_PAYMENT_METHOD_D_.ca84a7745d": ["model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F", "model.dlh_stripe.W_STR_PAYMENT_METHOD_D"], "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_K_CHARGE_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.3e142faa2f": ["model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F", "model.dlh_stripe.W_STR_CUSTOMER_D"], "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.cbe37b8f83": ["model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F", "model.dlh_stripe.W_STR_DATE_D"], "test.dlh_stripe.unique_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK.a1a9d99086": ["model.dlh_stripe.W_STR_CREDIT_NOTES_F"], "test.dlh_stripe.not_null_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK.81b123fe3b": ["model.dlh_stripe.W_STR_CREDIT_NOTES_F"], "test.dlh_stripe.relationships_W_STR_CREDIT_NOTES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.51e7fe158e": ["model.dlh_stripe.W_STR_CREDIT_NOTES_F", "model.dlh_stripe.W_STR_CUSTOMER_D"], "test.dlh_stripe.relationships_W_STR_CREDIT_NOTES_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.d603af3cf4": ["model.dlh_stripe.W_STR_CREDIT_NOTES_F", "model.dlh_stripe.W_STR_DATE_D"], "test.dlh_stripe.unique_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK.4f12428a54": ["model.dlh_stripe.W_STR_INVOICE_F"], "test.dlh_stripe.not_null_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK.4ed964a8c9": ["model.dlh_stripe.W_STR_INVOICE_F"], "test.dlh_stripe.relationships_W_STR_INVOICE_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.3db851b367": ["model.dlh_stripe.W_STR_CUSTOMER_D", "model.dlh_stripe.W_STR_INVOICE_F"], "test.dlh_stripe.relationships_W_STR_INVOICE_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.c471e57762": ["model.dlh_stripe.W_STR_INVOICE_F", "model.dlh_stripe.W_STR_PLAN_D"], "test.dlh_stripe.relationships_W_STR_INVOICE_F_A_INVOICE_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.454b1f5d18": ["model.dlh_stripe.W_STR_DATE_D", "model.dlh_stripe.W_STR_INVOICE_F"], "test.dlh_stripe.unique_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK.a835da90c7": ["model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F"], "test.dlh_stripe.not_null_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK.d4f5409fd3": ["model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F"], "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.7d5d1609c5": ["model.dlh_stripe.W_STR_CUSTOMER_D", "model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F"], "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.b0117f8e28": ["model.dlh_stripe.W_STR_PLAN_D", "model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F"], "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_A_DATE_REF__K_DATE_BK__ref_W_STR_DATE_D_.7d65410f95": ["model.dlh_stripe.W_STR_DATE_D", "model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F"], "test.dlh_stripe.unique_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK.d73112adef": ["model.dlh_stripe.W_STR_SUBSCRIPTION_F"], "test.dlh_stripe.not_null_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK.e56d4745fb": ["model.dlh_stripe.W_STR_SUBSCRIPTION_F"], "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.2d14fded03": ["model.dlh_stripe.W_STR_CUSTOMER_D", "model.dlh_stripe.W_STR_SUBSCRIPTION_F"], "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.97e6d341b2": ["model.dlh_stripe.W_STR_PLAN_D", "model.dlh_stripe.W_STR_SUBSCRIPTION_F"], "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_A_ITEM_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.2d5cef9214": ["model.dlh_stripe.W_STR_DATE_D", "model.dlh_stripe.W_STR_SUBSCRIPTION_F"], "source.dlh_stripe.DEMO_STRIPE.BALANCE_TRANSACTION": [], "source.dlh_stripe.DEMO_STRIPE.CHARGE": [], "source.dlh_stripe.DEMO_STRIPE.CUSTOMER": [], "source.dlh_stripe.DEMO_STRIPE.PAYMENT_INTENT": [], "source.dlh_stripe.DEMO_STRIPE.PAYMENT_METHOD": [], "source.dlh_stripe.DEMO_STRIPE.PAYMENT_METHOD_CARD": [], "source.dlh_stripe.DEMO_STRIPE.PAYOUT": [], "source.dlh_stripe.DEMO_STRIPE.REFUND": [], "source.dlh_stripe.DEMO_STRIPE.CARD": [], "source.dlh_stripe.DEMO_STRIPE.PLAN": [], "source.dlh_stripe.DEMO_STRIPE.PRODUCT": [], "source.dlh_stripe.DEMO_STRIPE.INVOICE": [], "source.dlh_stripe.DEMO_STRIPE.INVOICE_LINE_ITEM": [], "source.dlh_stripe.DEMO_STRIPE.SUBSCRIPTION": [], "source.dlh_stripe.DEMO_STRIPE.SUBSCRIPTION_ITEM": [], "source.dlh_stripe.DEMO_STRIPE.STRIPE_ORDER": [], "source.dlh_stripe.DEMO_STRIPE.ORDER_ITEM": [], "source.dlh_stripe.DEMO_STRIPE.ORDER_RETURN": [], "source.dlh_stripe.DEMO_STRIPE.ORDER_RETURN_ITEM": [], "source.dlh_stripe.DEMO_STRIPE.CREDIT_NOTE": [], "source.dlh_stripe.DEMO_STRIPE.CREDIT_NOTE_LINE_ITEM": []}, "child_map": {"model.dlh_stripe.V_STR_PAYMENT_INTENT_STG": ["model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F"], "model.dlh_stripe.V_STR_CHARGES_STG": ["model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F"], "model.dlh_stripe.V_STR_CREDIT_NOTE_HEADER_STG": ["model.dlh_stripe.V_STR_CREDIT_NOTES_STG"], "model.dlh_stripe.V_STR_CREDIT_NOTES_STG": ["model.dlh_stripe.W_STR_CREDIT_NOTES_F"], "model.dlh_stripe.V_STR_CREDIT_NOTE_LINE_ITEM_STG": ["model.dlh_stripe.V_STR_CREDIT_NOTES_STG"], "model.dlh_stripe.V_STR_INVOICES_STG": ["model.dlh_stripe.W_STR_INVOICE_F"], "model.dlh_stripe.V_STR_INVOICE_LINE_ITEM_STG": ["model.dlh_stripe.V_STR_INVOICES_STG"], "model.dlh_stripe.V_STR_INVOICE_HEADER_STG": ["model.dlh_stripe.V_STR_INVOICES_STG"], "model.dlh_stripe.V_STR_PLAN_STG": ["model.dlh_stripe.W_STR_PLAN_D"], "model.dlh_stripe.V_STR_DATE_STG": ["model.dlh_stripe.W_STR_DATE_D"], "model.dlh_stripe.V_STR_PAYMENT_METHOD_STG": ["model.dlh_stripe.W_STR_PAYMENT_METHOD_D"], "model.dlh_stripe.V_STR_SUBSCRIPTION_STG": ["model.dlh_stripe.W_STR_SUBSCRIPTION_F"], "model.dlh_stripe.V_STR_BALANCE_TRANSACTIONS_STG": ["model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F"], "model.dlh_stripe.V_STR_REFUND_STG": ["model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F"], "model.dlh_stripe.V_STR_PAYOUT_STG": ["model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F"], "model.dlh_stripe.V_STR_CUSTOMERS_STG": ["model.dlh_stripe.W_STR_CUSTOMER_D"], "model.dlh_stripe.W_STR_SUBSCRIPTION_F": ["model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F", "model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F", "model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F", "test.dlh_stripe.not_null_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK.e56d4745fb", "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_A_ITEM_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.2d5cef9214", "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.2d14fded03", "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.97e6d341b2", "test.dlh_stripe.unique_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK.d73112adef"], "model.dlh_stripe.W_STR_CREDIT_NOTES_F": ["test.dlh_stripe.not_null_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK.81b123fe3b", "test.dlh_stripe.relationships_W_STR_CREDIT_NOTES_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.d603af3cf4", "test.dlh_stripe.relationships_W_STR_CREDIT_NOTES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.51e7fe158e", "test.dlh_stripe.unique_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK.a1a9d99086"], "model.dlh_stripe.W_STR_INVOICE_F": ["test.dlh_stripe.not_null_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK.4ed964a8c9", "test.dlh_stripe.relationships_W_STR_INVOICE_F_A_INVOICE_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.454b1f5d18", "test.dlh_stripe.relationships_W_STR_INVOICE_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.3db851b367", "test.dlh_stripe.relationships_W_STR_INVOICE_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.c471e57762", "test.dlh_stripe.unique_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK.4f12428a54"], "model.dlh_stripe.W_STR_CUSTOMER_D": ["test.dlh_stripe.not_null_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK.1c417e987d", "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_K_CHARGE_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.3e142faa2f", "test.dlh_stripe.relationships_W_STR_CREDIT_NOTES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.51e7fe158e", "test.dlh_stripe.relationships_W_STR_INVOICE_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.3db851b367", "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.7d5d1609c5", "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.2d14fded03", "test.dlh_stripe.unique_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK.f605ac9ade"], "model.dlh_stripe.W_STR_PAYMENT_METHOD_D": ["test.dlh_stripe.not_null_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK.ac6f63c478", "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_K_STR_PAYMENT_METHOD_DLHK__K_PAYMENT_METHOD_DLHK__ref_W_STR_PAYMENT_METHOD_D_.ca84a7745d", "test.dlh_stripe.unique_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK.116a474054"], "model.dlh_stripe.W_STR_BALANCE_TRANSACTION_F": ["test.dlh_stripe.not_null_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK.9dae5af3dc", "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.cbe37b8f83", "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_K_CHARGE_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.3e142faa2f", "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_K_STR_PAYMENT_METHOD_DLHK__K_PAYMENT_METHOD_DLHK__ref_W_STR_PAYMENT_METHOD_D_.ca84a7745d", "test.dlh_stripe.unique_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK.5cf5d425aa"], "model.dlh_stripe.W_STR_DATE_D": ["model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F", "model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F", "model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F", "test.dlh_stripe.not_null_W_STR_DATE_D_K_DATE_INTEGER_BK.421e48be45", "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.cbe37b8f83", "test.dlh_stripe.relationships_W_STR_CREDIT_NOTES_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.d603af3cf4", "test.dlh_stripe.relationships_W_STR_INVOICE_F_A_INVOICE_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.454b1f5d18", "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_A_DATE_REF__K_DATE_BK__ref_W_STR_DATE_D_.7d65410f95", "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_A_ITEM_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.2d5cef9214", "test.dlh_stripe.unique_W_STR_DATE_D_K_DATE_INTEGER_BK.a508cb2e42"], "model.dlh_stripe.W_STR_SUBSCRIPTION_BY_PLAN_F": ["test.dlh_stripe.not_null_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK.d4f5409fd3", "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_A_DATE_REF__K_DATE_BK__ref_W_STR_DATE_D_.7d65410f95", "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.7d5d1609c5", "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.b0117f8e28", "test.dlh_stripe.unique_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK.a835da90c7"], "model.dlh_stripe.W_STR_PLAN_D": ["test.dlh_stripe.not_null_W_STR_PLAN_D_K_PLAN_DLHK.569c376e05", "test.dlh_stripe.relationships_W_STR_INVOICE_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.c471e57762", "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.b0117f8e28", "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.97e6d341b2", "test.dlh_stripe.unique_W_STR_PLAN_D_K_PLAN_DLHK.ca05c789c2"], "test.dlh_stripe.unique_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK.f605ac9ade": [], "test.dlh_stripe.not_null_W_STR_CUSTOMER_D_K_CUSTOMER_DLHK.1c417e987d": [], "test.dlh_stripe.unique_W_STR_DATE_D_K_DATE_INTEGER_BK.a508cb2e42": [], "test.dlh_stripe.not_null_W_STR_DATE_D_K_DATE_INTEGER_BK.421e48be45": [], "test.dlh_stripe.unique_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK.116a474054": [], "test.dlh_stripe.not_null_W_STR_PAYMENT_METHOD_D_K_PAYMENT_METHOD_DLHK.ac6f63c478": [], "test.dlh_stripe.unique_W_STR_PLAN_D_K_PLAN_DLHK.ca05c789c2": [], "test.dlh_stripe.not_null_W_STR_PLAN_D_K_PLAN_DLHK.569c376e05": [], "test.dlh_stripe.unique_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK.5cf5d425aa": [], "test.dlh_stripe.not_null_W_STR_BALANCE_TRANSACTION_F_K_BALANCE_TRANSACTION_DLHK.9dae5af3dc": [], "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_K_STR_PAYMENT_METHOD_DLHK__K_PAYMENT_METHOD_DLHK__ref_W_STR_PAYMENT_METHOD_D_.ca84a7745d": [], "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_K_CHARGE_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.3e142faa2f": [], "test.dlh_stripe.relationships_W_STR_BALANCE_TRANSACTION_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.cbe37b8f83": [], "test.dlh_stripe.unique_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK.a1a9d99086": [], "test.dlh_stripe.not_null_W_STR_CREDIT_NOTES_F_K_CREDIT_NOTE_DLHK.81b123fe3b": [], "test.dlh_stripe.relationships_W_STR_CREDIT_NOTES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.51e7fe158e": [], "test.dlh_stripe.relationships_W_STR_CREDIT_NOTES_F_A_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.d603af3cf4": [], "test.dlh_stripe.unique_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK.4f12428a54": [], "test.dlh_stripe.not_null_W_STR_INVOICE_F_K_INVOICE_LINE_ITEM_DLHK.4ed964a8c9": [], "test.dlh_stripe.relationships_W_STR_INVOICE_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.3db851b367": [], "test.dlh_stripe.relationships_W_STR_INVOICE_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.c471e57762": [], "test.dlh_stripe.relationships_W_STR_INVOICE_F_A_INVOICE_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.454b1f5d18": [], "test.dlh_stripe.unique_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK.a835da90c7": [], "test.dlh_stripe.not_null_W_STR_SUBSCRIPTION_BY_PLAN_F_K_SUBSCRIPTION_BY_PLAN_DLHK.d4f5409fd3": [], "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.7d5d1609c5": [], "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.b0117f8e28": [], "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_BY_PLAN_F_A_DATE_REF__K_DATE_BK__ref_W_STR_DATE_D_.7d65410f95": [], "test.dlh_stripe.unique_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK.d73112adef": [], "test.dlh_stripe.not_null_W_STR_SUBSCRIPTION_F_K_SUBSCRIPTION_ITEM_DLHK.e56d4745fb": [], "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_STR_CUSTOMER_D_.2d14fded03": [], "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_K_PLAN_DLHK__K_PLAN_DLHK__ref_W_STR_PLAN_D_.97e6d341b2": [], "test.dlh_stripe.relationships_W_STR_SUBSCRIPTION_F_A_ITEM_CREATED_DATE_AT__K_DATE_BK__ref_W_STR_DATE_D_.2d5cef9214": [], "source.dlh_stripe.DEMO_STRIPE.BALANCE_TRANSACTION": ["model.dlh_stripe.V_STR_BALANCE_TRANSACTIONS_STG"], "source.dlh_stripe.DEMO_STRIPE.CHARGE": ["model.dlh_stripe.V_STR_CHARGES_STG"], "source.dlh_stripe.DEMO_STRIPE.CUSTOMER": ["model.dlh_stripe.V_STR_CUSTOMERS_STG"], "source.dlh_stripe.DEMO_STRIPE.PAYMENT_INTENT": ["model.dlh_stripe.V_STR_PAYMENT_INTENT_STG"], "source.dlh_stripe.DEMO_STRIPE.PAYMENT_METHOD": ["model.dlh_stripe.V_STR_PAYMENT_METHOD_STG"], "source.dlh_stripe.DEMO_STRIPE.PAYMENT_METHOD_CARD": ["model.dlh_stripe.V_STR_PAYMENT_METHOD_STG"], "source.dlh_stripe.DEMO_STRIPE.PAYOUT": ["model.dlh_stripe.V_STR_PAYOUT_STG"], "source.dlh_stripe.DEMO_STRIPE.REFUND": ["model.dlh_stripe.V_STR_REFUND_STG"], "source.dlh_stripe.DEMO_STRIPE.CARD": [], "source.dlh_stripe.DEMO_STRIPE.PLAN": ["model.dlh_stripe.V_STR_PLAN_STG"], "source.dlh_stripe.DEMO_STRIPE.PRODUCT": ["model.dlh_stripe.V_STR_PLAN_STG"], "source.dlh_stripe.DEMO_STRIPE.INVOICE": ["model.dlh_stripe.V_STR_INVOICE_HEADER_STG"], "source.dlh_stripe.DEMO_STRIPE.INVOICE_LINE_ITEM": ["model.dlh_stripe.V_STR_INVOICE_LINE_ITEM_STG"], "source.dlh_stripe.DEMO_STRIPE.SUBSCRIPTION": ["model.dlh_stripe.V_STR_SUBSCRIPTION_STG"], "source.dlh_stripe.DEMO_STRIPE.SUBSCRIPTION_ITEM": ["model.dlh_stripe.V_STR_SUBSCRIPTION_STG"], "source.dlh_stripe.DEMO_STRIPE.STRIPE_ORDER": [], "source.dlh_stripe.DEMO_STRIPE.ORDER_ITEM": [], "source.dlh_stripe.DEMO_STRIPE.ORDER_RETURN": [], "source.dlh_stripe.DEMO_STRIPE.ORDER_RETURN_ITEM": [], "source.dlh_stripe.DEMO_STRIPE.CREDIT_NOTE": ["model.dlh_stripe.V_STR_CREDIT_NOTE_HEADER_STG"], "source.dlh_stripe.DEMO_STRIPE.CREDIT_NOTE_LINE_ITEM": ["model.dlh_stripe.V_STR_CREDIT_NOTE_LINE_ITEM_STG"]}}